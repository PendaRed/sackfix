package org.sackfix.codegen

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import scala.collection.mutable.ArrayBuffer

/**
  * Created by Jonathan during 2016.
  */
class SfCodeGeneratorFieldFactory(val sourceXmlSpenFileName: String, val packageName: String,
                                  val cname: String,
                                  fields: ArrayBuffer[FixFieldDetail]) {

  /**
    * For a field definition this generates the full class file.
    */
  def generateClassStr: String = {
    generateFileHeader + generateFieldCreator
  }

  private def generateFieldCreator: String = {
    s"""object $cname {
        |
        |$generateFieldLookup
        |
        |  def createField(t:Int, v:Option[Any]):Option[SfFixField[Any]] = {
        |    t match {
        |${
      fields.map(fieldDet => {
        val fname = fieldDet.name + "Field"
        //         case k@BeginStringField.TagId => BeginStringField.decode(fld._2)
        s"      case $fname.TagId => $fname.decode(v)"
      }).mkString("\n")
    }
        |      case _ => None
        |    }
        |  }
        |}
        |""".stripMargin
  }

  private def generateFieldLookup: String = {
    s"""  val NameLookup = Map[Int, String](
        |    ${fields.zipWithIndex.map{ case (fieldDet,index) =>
      fieldDet.number+"->\""+fieldDet.name+"\""+
    {if (index<fields.size-1) "," else ""} +
    {if (index%3==2) "\n    " else " "}}.mkString}
        |  )""".stripMargin
  }

  private def generateFileHeader: String = {
    s"""package $packageName
        |
          |import org.sackfix.common.validated.fields.{SfFixField, SfFixGroup}
        |
          |/**
        |  * Generated by SackFix code generator on ${DateTimeFormatter.BASIC_ISO_DATE.format(LocalDateTime.now())}
        |  * Source specification was read from:
        |  *   $sourceXmlSpenFileName
        |  */
        |""".stripMargin
  }


}
