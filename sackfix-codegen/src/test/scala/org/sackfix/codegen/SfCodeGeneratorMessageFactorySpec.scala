package org.sackfix.codegen

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

import org.scalatest.FlatSpec

/**
  * Created by Jonathan during 2016.
  */
class SfCodeGeneratorMessageFactorySpec extends FlatSpec with SfGeneratorTestUtil {

  behavior of "SfCodeGeneratorMessageFactory"

  val codeGen: SfCodeGeneratorMessageFactory = new SfCodeGeneratorMessageFactory(
    "sourceXmlSpenFileName", "com.fields.test","com.test",
    "MyTestClass",
    List(new FixMessageDef("Advertisement", "7","app"),
      new FixMessageDef("QuoteResponse", "A", "app")))

  it should "generate message generator" in {
    val expected =
      s"""
         |package com.test
         |
         |import org.sackfix.common.validated.fields.SfFixMessageDecoder
         |
         |/**
         |  * Generated by SackFix code generator on ${DateTimeFormatter.BASIC_ISO_DATE.format(LocalDateTime.now())}
         |  * Source specification was read from:
         |  *   sourceXmlSpenFileName
         |  */
         |object MyTestClass {
         |  def getMessage(msgType:String):Option[SfFixMessageDecoder] = msgType match {
         |      case "7" => Some(AdvertisementMessage)
         |      case "A" => Some(QuoteResponseMessage)
         |      case _ => None
         |    }
         |  }
         |}
         |""".stripMargin.replaceAll("[\\r\\n]", "\n")

    val generated = codeGen.generateClassStr
    println(generated)
    compareCode(expected, generated)
  }
}