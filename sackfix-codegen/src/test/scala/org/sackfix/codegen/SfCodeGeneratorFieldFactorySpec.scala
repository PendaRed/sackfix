package org.sackfix.codegen

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

import org.scalatest.FlatSpec

/**
  * Created by Jonathan during 2016.
  */
class SfCodeGeneratorFieldFactorySpec extends FlatSpec  with SfGeneratorTestUtil {
  behavior of "SfCodeGeneratorFieldFactory"

  val codeGen: SfCodeGeneratorFieldFactory = new SfCodeGeneratorFieldFactory(
    "sourceXmlSpenFileName", "com.test",
    "MyTestClass",
    List(new FixFieldDetail("263", "SubscriptionRequestType", "CHAR"),
      new FixFieldDetail("254", "LegRedemptionDate", "LOCALMKTDATE")))

  it should "generate a very simple field class" in {
    val expected =
      s"""
         |package com.test
         |
         |import org.sackfix.common.validated.fields.{SfFixField, SfFixGroup}
         |
         |/**
         |  * Generated by SackFix code generator on ${DateTimeFormatter.BASIC_ISO_DATE.format(LocalDateTime.now())}
         |  * Source specification was read from:
         |  *   sourceXmlSpenFileName
         |  */
         |object MyTestClass {
         |
         |  val NameLookup = Map[Int, String](
         |    263->"SubscriptionRequestType", 254->"LegRedemptionDate"
         |  )
         |
         |  def createField(t:Int, v:Option[Any]):Option[SfFixField[Any]] = {
         |    t match {
         |      case SubscriptionRequestTypeField.TagId => SubscriptionRequestTypeField.decode(v)
         |      case LegRedemptionDateField.TagId => LegRedemptionDateField.decode(v)
         |      case _ => None
         |    }
         |  }
         |}
         |""".stripMargin.replaceAll("[\\r\\n]", "\n")

    val generated = codeGen.generateClassStr
    //println(generated)
    compareCode(expected, generated)
  }
}