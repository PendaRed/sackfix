package org.sackfix.codegen

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

import org.sackfix.common.validated.fields.SfFieldBoolean
import org.scalatest.FlatSpec

/**
  * Created by Jonathan during 2016.
  */
class SfCodeGeneratorFieldTest extends FlatSpec with SfGeneratorTestUtil {
  behavior of "SfCodeGenerator"
  val codeGen : SfCodeGeneratorField = new SfCodeGeneratorField("",new FixFieldDetail("8","BeginString","STRING"))

  it should "generate a very simple field class" in {
    val fld = new FixFieldDetail( "65", "SymbolSfx", "STRING", true)
    fld.addSubElement(new FixValueDetail("WI","WHEN_ISSUED"))
    fld.addSubElement(new FixValueDetail("CD", "A_EUCP_WITH_LUMP_SUM_INTEREST"))

    val codeGen : SfCodeGeneratorField = new SfCodeGeneratorField("com.test",fld)

    val generated = codeGen.generateFieldClassStr
  }

  it should "generate a longer field class" in {
    val fld = new FixFieldDetail("102", "CxlRejReason", "INT", true)
    fld.addSubElement(new FixValueDetail("0", "TOO_LATE_TO_CANCEL"))
    fld.addSubElement(new FixValueDetail("1", "UNKNOWN_ORDER"))
    fld.addSubElement(new FixValueDetail("2", "BROKER_EXCHANGE_OPTION"))
    fld.addSubElement(new FixValueDetail("3", "ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS"))
    fld.addSubElement(new FixValueDetail("4", "UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST"))
    fld.addSubElement(new FixValueDetail("5", "ORIGORDMODTIME_OF_ORDER"))
    fld.addSubElement(new FixValueDetail("6", "DUPLICATE_CLORDID_RECEIVED"))
    fld.addSubElement(new FixValueDetail("7", "PRICE_EXCEEDS_CURRENT_PRICE"))
    fld.addSubElement(new FixValueDetail("8", "PRICE_EXCEEDS_CURRENT_PRICE_BAND"))
    fld.addSubElement(new FixValueDetail("18", "INVALID_PRICE_INCREMENT"))
    fld.addSubElement(new FixValueDetail("99", "OTHER"))

    val codeGen: SfCodeGeneratorField = new SfCodeGeneratorField("com.test", fld)
    val generated = codeGen.generateFieldClassStr
    //    println(generated)
    val expected =
      s"""package com.test
        |
        |import org.sackfix.common.validated.fields.SfFieldInt
        |
        |/**
        |  * Generated by SackFix code generator on 20170407
        |  */
        |case class CxlRejReasonField(override val value: Int) extends SfFieldInt(102, value) {
        |  override def toString = appendStringBuilder().toString
        |  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(102)CxlRejReason=(").append(value).append(")").append(CxlRejReasonField.fixDescriptionByValue.getOrElse(value,""))
        |}
        |
        |object CxlRejReasonField {
        |  val TagId = 102
        |  val TooLateToCancel=0
        |  val UnknownOrder=1
        |  val BrokerExchangeOption=2
        |  val OrderAlreadyInPendingCancelOrPendingReplaceStatus=3
        |  val UnableToProcessOrderMassCancelRequest=4
        |  val OrigordmodtimeOfOrder=5
        |  val DuplicateClordidReceived=6
        |  val PriceExceedsCurrentPrice=7
        |  val PriceExceedsCurrentPriceBand=8
        |  val InvalidPriceIncrement=18
        |  val Other=99
        |  lazy val fixDescriptionByValue = Map(0->"TOO_LATE_TO_CANCEL",1->"UNKNOWN_ORDER",
        |    2->"BROKER_EXCHANGE_OPTION",3->"ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS",4->"UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST",
        |    5->"ORIGORDMODTIME_OF_ORDER",6->"DUPLICATE_CLORDID_RECEIVED",7->"PRICE_EXCEEDS_CURRENT_PRICE",
        |    8->"PRICE_EXCEEDS_CURRENT_PRICE_BAND",18->"INVALID_PRICE_INCREMENT",99->"OTHER")
        |
        |  def apply(value: String) = try {
        |    new CxlRejReasonField(value.toInt)
        |  } catch {
        |    case ex: Exception => throw new IllegalArgumentException("new CxlRejReason("+value.toString+") failed with exception", ex)
        |  }
        |  def decode(a: Option[Any]) : Option[CxlRejReasonField] = a match {
        |    case Some(v) => decode(v)
        |    case _ =>  scala.Option.empty[CxlRejReasonField]
        |  }
        |
        |  def decode(a: Any) : Option[CxlRejReasonField] = a match {
        |    case v: String => Some(CxlRejReasonField(v))
        |    case v: Int => Some(CxlRejReasonField(v))
        |    case v: CxlRejReasonField => Some(v)
        |    case _ => scala.Option.empty[CxlRejReasonField]
        |  }
        |}
        |""".stripMargin

    compareCode(expected, generated)
  }
}
