package org.sackfix.codegen

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

import org.scalatest.flatspec.AnyFlatSpec

/**
  * Created by Jonathan during 2016.
  */
class SfCodeGeneratorGroupFactorySpec extends AnyFlatSpec with SfGeneratorTestUtil {

  behavior of "SfCodeGeneratorGroupFactorySpec"

  val codeGen: SfCodeGeneratorGroupFactory = new SfCodeGeneratorGroupFactory(
    "sourceXmlSpenFileName", "org.fields.test","com.test",
    "MyTestClass",
    List(new FixGroupDef("Group1", false, "Group1Grp"),
      new FixGroupDef("Group2", false, "Group2Grp")))

  it should "generate a very simple field class" in {
    val expected =
      s"""
         |package com.test
         |
         |import org.fields.test._
         |import org.sackfix.common.validated.fields.SfFixGroup
         |import org.sackfix.common.message.HopsGroup
         |
         |/**
         |  * Generated by SackFix code generator on ${DateTimeFormatter.BASIC_ISO_DATE.format(LocalDateTime.now())}
         |  * Source specification was read from:
         |  *   sourceXmlSpenFileName
         |  */
         |object MyTestClass {
         |  def getGroup(t:Int):Option[SfFixDecoder] = {
         |    t match {
         |      case Group1Field.TagId => Some(Group1Grp)
         |      case Group2Field.TagId => Some(Group2Grp)
         |      case _ => None
         |    }
         |  }
         |}
         |
         |""".stripMargin.replaceAll("[\\r\\n]", "\n")

    val generated = codeGen.generateClassStr
    println(generated)
    compareCode(expected, generated)
  }
}
