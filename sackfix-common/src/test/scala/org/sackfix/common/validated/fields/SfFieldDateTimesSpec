package org.sackfix.common.validated.fields

import java.time._
import java.time.format.DateTimeFormatter
import java.time.temporal.TemporalAccessor

import org.scalatest.flatspec.AnyFlatSpec
import sun.util.calendar.ZoneInfo

/**
  * Created by Jonathan during 2016.
  */
class SfFieldTzTimeOnlyTest extends AnyFlatSpec {
  behavior of "SfFieldTzTimeOnly"

  it should "render to fix" in {
    val t = OffsetTime.of( 20, 10, 48, 0, ZoneOffset.ofHours(1))
    val fld = new SfFieldTzTimeOnly(42,  t)
    assert("42=20:10:48+01:00\u0001" == fld.fixStr)
  }
}
class SfFieldTzTimeStampTest extends AnyFlatSpec {
  behavior of "SfFieldTzTimeOnly"

  it should "render to fix" in {
    val fld = new SfFieldTzTimeStamp(42, OffsetDateTime.of(1948,4,28,20, 10, 48,0, ZoneOffset.ofHours(4)))
    //YYYYMMDD-HH:MMM:SS.sss*[Z[ + - hh[:mm]]
    assert("42=19480428-20:10:48+04\u0001" == fld.fixStr)
  }
}
class SfFieldUtcDateOnlyTest extends AnyFlatSpec {
  behavior of "SfFieldTzTimeOnly"

  it should "render to fix" in {
    val fld = new SfFieldUtcDateOnly(42, LocalDate.of(1948,4,28))
    assert("42=19480428\u0001" == fld.fixStr)
  }
}
class SfFieldUtcTimeOnlyTest extends AnyFlatSpec {
  behavior of "SfFieldTzTimeOnly"

  it should "render to fix" in {
    val fld = new SfFieldUtcTimeOnly(42, LocalTime.of(20, 10, 48))
    assert("42=20:10:48\u0001" == fld.fixStr)
  }
}
class SfFieldUtcTimeStampTest extends AnyFlatSpec {
  behavior of "SfFieldTzTimeOnly"

  it should "render to fix" in {
    val fld = new SfFieldUtcTimeStamp(42, LocalDateTime.of(1948,4,28, 20, 10, 48))
    assert("42=19480428-20:10:48\u0001" == fld.fixStr)
  }
}
