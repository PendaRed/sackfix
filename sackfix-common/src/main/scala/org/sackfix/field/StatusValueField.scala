package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class StatusValueField(override val value: Int) extends SfFieldInt(928, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(928)StatusValue=(").append(value).append(")").append(StatusValueField.fixDescriptionByValue.getOrElse(value,""))
}

object StatusValueField {
  val TagId = 928 
  val Connected=1
  val NotConnectedDownExpectedUp=2
  val NotConnectedDownExpectedDown=3
  val InProcess=4
  lazy val fixDescriptionByValue = Map(1->"CONNECTED",2->"NOT_CONNECTED_DOWN_EXPECTED_UP",
    3->"NOT_CONNECTED_DOWN_EXPECTED_DOWN",4->"IN_PROCESS")
 
  def apply(value: String) = try {
    new StatusValueField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new StatusValue("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[StatusValueField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[StatusValueField]
  }

  def decode(a: Any) : Option[StatusValueField] = a match {
    case v: String => Some(StatusValueField(v))
    case v: Int => Some(StatusValueField(v))
    case v: StatusValueField => Some(v)
    case _ => scala.Option.empty[StatusValueField]
  } 
}
