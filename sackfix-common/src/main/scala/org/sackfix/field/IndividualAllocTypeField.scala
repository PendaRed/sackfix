package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class IndividualAllocTypeField(override val value: Int) extends SfFieldInt(992, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(992)IndividualAllocType=(").append(value).append(")").append(IndividualAllocTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object IndividualAllocTypeField {
  val TagId = 992 
  val SubAllocate=1
  val ThirdPartyAllocation=2
  lazy val fixDescriptionByValue = Map(1->"SUB_ALLOCATE",2->"THIRD_PARTY_ALLOCATION")
 
  def apply(value: String) = try {
    new IndividualAllocTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new IndividualAllocType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[IndividualAllocTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[IndividualAllocTypeField]
  }

  def decode(a: Any) : Option[IndividualAllocTypeField] = a match {
    case v: String => Some(IndividualAllocTypeField(v))
    case v: Int => Some(IndividualAllocTypeField(v))
    case v: IndividualAllocTypeField => Some(v)
    case _ => scala.Option.empty[IndividualAllocTypeField]
  } 
}
