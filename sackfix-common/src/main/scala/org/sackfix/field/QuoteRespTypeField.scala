package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class QuoteRespTypeField(override val value: Int) extends SfFieldInt(694, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(694)QuoteRespType=(").append(value).append(")").append(QuoteRespTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object QuoteRespTypeField {
  val TagId = 694 
  val HitLift=1
  val Counter=2
  val Expired=3
  val Cover=4
  val DoneAway=5
  val Pass=6
  lazy val fixDescriptionByValue = Map(1->"HIT_LIFT",2->"COUNTER",
    3->"EXPIRED",4->"COVER",5->"DONE_AWAY",
    6->"PASS")
 
  def apply(value: String) = try {
    new QuoteRespTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new QuoteRespType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[QuoteRespTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[QuoteRespTypeField]
  }

  def decode(a: Any) : Option[QuoteRespTypeField] = a match {
    case v: String => Some(QuoteRespTypeField(v))
    case v: Int => Some(QuoteRespTypeField(v))
    case v: QuoteRespTypeField => Some(v)
    case _ => scala.Option.empty[QuoteRespTypeField]
  } 
}
