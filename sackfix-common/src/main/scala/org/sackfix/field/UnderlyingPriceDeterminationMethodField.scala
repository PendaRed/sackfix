package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class UnderlyingPriceDeterminationMethodField(override val value: Int) extends SfFieldInt(1481, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1481)UnderlyingPriceDeterminationMethod=(").append(value).append(")").append(UnderlyingPriceDeterminationMethodField.fixDescriptionByValue.getOrElse(value,""))
}

object UnderlyingPriceDeterminationMethodField {
  val TagId = 1481 
  val Regular=1
  val SpecialReference=2
  val OptimalValue=3
  val AverageValue=4
  lazy val fixDescriptionByValue = Map(1->"REGULAR",2->"SPECIAL_REFERENCE",
    3->"OPTIMAL_VALUE",4->"AVERAGE_VALUE")
 
  def apply(value: String) = try {
    new UnderlyingPriceDeterminationMethodField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new UnderlyingPriceDeterminationMethod("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[UnderlyingPriceDeterminationMethodField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[UnderlyingPriceDeterminationMethodField]
  }

  def decode(a: Any) : Option[UnderlyingPriceDeterminationMethodField] = a match {
    case v: String => Some(UnderlyingPriceDeterminationMethodField(v))
    case v: Int => Some(UnderlyingPriceDeterminationMethodField(v))
    case v: UnderlyingPriceDeterminationMethodField => Some(v)
    case _ => scala.Option.empty[UnderlyingPriceDeterminationMethodField]
  } 
}
