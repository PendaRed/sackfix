package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class PosReqStatusField(override val value: Int) extends SfFieldInt(729, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(729)PosReqStatus=(").append(value).append(")").append(PosReqStatusField.fixDescriptionByValue.getOrElse(value,""))
}

object PosReqStatusField {
  val TagId = 729 
  val Completed=0
  val CompletedWithWarnings=1
  val Rejected=2
  lazy val fixDescriptionByValue = Map(0->"COMPLETED",1->"COMPLETED_WITH_WARNINGS",
    2->"REJECTED")
 
  def apply(value: String) = try {
    new PosReqStatusField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new PosReqStatus("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[PosReqStatusField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[PosReqStatusField]
  }

  def decode(a: Any) : Option[PosReqStatusField] = a match {
    case v: String => Some(PosReqStatusField(v))
    case v: Int => Some(PosReqStatusField(v))
    case v: PosReqStatusField => Some(v)
    case _ => scala.Option.empty[PosReqStatusField]
  } 
}
