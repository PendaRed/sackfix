package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class TradePublishIndicatorField(override val value: Int) extends SfFieldInt(1390, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1390)TradePublishIndicator=(").append(value).append(")").append(TradePublishIndicatorField.fixDescriptionByValue.getOrElse(value,""))
}

object TradePublishIndicatorField {
  val TagId = 1390 
  val DoNotPublishTrade=0
  val PublishTrade=1
  val DeferredPublication=2
  lazy val fixDescriptionByValue = Map(0->"DO_NOT_PUBLISH_TRADE",1->"PUBLISH_TRADE",
    2->"DEFERRED_PUBLICATION")
 
  def apply(value: String) = try {
    new TradePublishIndicatorField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TradePublishIndicator("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TradePublishIndicatorField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TradePublishIndicatorField]
  }

  def decode(a: Any) : Option[TradePublishIndicatorField] = a match {
    case v: String => Some(TradePublishIndicatorField(v))
    case v: Int => Some(TradePublishIndicatorField(v))
    case v: TradePublishIndicatorField => Some(v)
    case _ => scala.Option.empty[TradePublishIndicatorField]
  } 
}
