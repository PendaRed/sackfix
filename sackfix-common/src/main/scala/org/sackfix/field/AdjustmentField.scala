package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class AdjustmentField(override val value: Int) extends SfFieldInt(334, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(334)Adjustment=(").append(value).append(")").append(AdjustmentField.fixDescriptionByValue.getOrElse(value,""))
}

object AdjustmentField {
  val TagId = 334 
  val Cancel=1
  val Error=2
  val Correction=3
  lazy val fixDescriptionByValue = Map(1->"CANCEL",2->"ERROR",
    3->"CORRECTION")
 
  def apply(value: String) = try {
    new AdjustmentField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new Adjustment("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[AdjustmentField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[AdjustmentField]
  }

  def decode(a: Any) : Option[AdjustmentField] = a match {
    case v: String => Some(AdjustmentField(v))
    case v: Int => Some(AdjustmentField(v))
    case v: AdjustmentField => Some(v)
    case _ => scala.Option.empty[AdjustmentField]
  } 
}
