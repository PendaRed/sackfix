package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class SecurityIDSourceField(override val value: String) extends SfFieldString(22, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(22)SecurityIDSource=(").append(value).append(")").append(SecurityIDSourceField.fixDescriptionByValue.getOrElse(value,""))
}

object SecurityIDSourceField {
  val TagId = 22 
  val Cusip="1"
  val Sedol="2"
  val Quik="3"
  val IsinNumber="4"
  val RicCode="5"
  val IsoCurrencyCode="6"
  val IsoCountryCode="7"
  val ExchangeSymbol="8"
  val ConsolidatedTapeAssociation="9"
  val BloombergSymbol="A"
  val Wertpapier="B"
  val Dutch="C"
  val Valoren="D"
  val Sicovam="E"
  val Belgian="F"
  val Common="G"
  val ClearingHouseClearingOrganization="H"
  val IsdaFpmlProductSpecification="I"
  val OptionsPriceReportingAuthority="J"
  val IsdaFpmlProductUrl="K"
  val LetterOfCredit="L"
  lazy val fixDescriptionByValue = Map("1"->"CUSIP","2"->"SEDOL",
    "3"->"QUIK","4"->"ISIN_NUMBER","5"->"RIC_CODE",
    "6"->"ISO_CURRENCY_CODE","7"->"ISO_COUNTRY_CODE","8"->"EXCHANGE_SYMBOL",
    "9"->"CONSOLIDATED_TAPE_ASSOCIATION","A"->"BLOOMBERG_SYMBOL","B"->"WERTPAPIER",
    "C"->"DUTCH","D"->"VALOREN","E"->"SICOVAM",
    "F"->"BELGIAN","G"->"COMMON","H"->"CLEARING_HOUSE_CLEARING_ORGANIZATION",
    "I"->"ISDA_FPML_PRODUCT_SPECIFICATION","J"->"OPTIONS_PRICE_REPORTING_AUTHORITY","K"->"ISDA_FPML_PRODUCT_URL",
    "L"->"LETTER_OF_CREDIT")
 
  def decode(a: Option[Any]) : Option[SecurityIDSourceField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SecurityIDSourceField]
  }

  def decode(a: Any) : Option[SecurityIDSourceField] = a match {
    case v: String => Some(SecurityIDSourceField(v))
    case v: SecurityIDSourceField => Some(v)
    case _ => scala.Option.empty[SecurityIDSourceField]
  } 
}
