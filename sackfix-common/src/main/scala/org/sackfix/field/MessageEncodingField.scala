package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class MessageEncodingField(override val value: String) extends SfFieldString(347, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(347)MessageEncoding=(").append(value).append(")").append(MessageEncodingField.fixDescriptionByValue.getOrElse(value,""))
}

object MessageEncodingField {
  val TagId = 347 
  val Iso2022Jp="ISO-2022-JP"
  val EucJp="EUC-JP"
  val ShiftJis="SHIFT_JIS"
  val Utf8="UTF-8"
  lazy val fixDescriptionByValue = Map("ISO-2022-JP"->"ISO_2022_JP","EUC-JP"->"EUC_JP",
    "SHIFT_JIS"->"SHIFT_JIS","UTF-8"->"UTF_8")
 
  def decode(a: Option[Any]) : Option[MessageEncodingField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MessageEncodingField]
  }

  def decode(a: Any) : Option[MessageEncodingField] = a match {
    case v: String => Some(MessageEncodingField(v))
    case v: MessageEncodingField => Some(v)
    case _ => scala.Option.empty[MessageEncodingField]
  } 
}
