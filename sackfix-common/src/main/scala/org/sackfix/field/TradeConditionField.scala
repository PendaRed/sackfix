package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class TradeConditionField(override val value: String) extends SfFieldString(277, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(277)TradeCondition=(").append(value).append(")").append(TradeConditionField.fixDescriptionByValue.getOrElse(value,""))
}

object TradeConditionField {
  val TagId = 277 
  val CashMarket="A"
  val AveragePriceTrade="B"
  val CashTrade="C"
  val NextDayMarket="D"
  val OpeningReopeningTradeDetail="E"
  val IntradayTradeDetail="F"
  val Rule127="G"
  val Rule155="H"
  val SoldLast="I"
  val NextDayTrade="J"
  val Opened="K"
  val Seller="L"
  val Sold="M"
  val StoppedStock="N"
  val ImbalanceMoreBuyers="P"
  val ImbalanceMoreSellers="Q"
  val OpeningPrice="R"
  val TradesResultingFromManualSlowQuote="Y"
  val TradesResultingFromIntermarketSweep="Z"
  val BargainCondition="S"
  val ConvertedPriceIndicator="T"
  val ExchangeLast="U"
  val FinalPriceOfSession="V"
  val ExPit="W"
  val Crossed="X"
  val Cancel="0"
  val VolumeOnly="a"
  val DirectPlus="b"
  val Acquisition="c"
  val Bunched="d"
  val Distribution="e"
  val BunchedSale="f"
  val SplitTrade="g"
  val CancelStopped="h"
  val CancelEth="i"
  val CancelStoppedEth="j"
  val OutOfSequenceEth="k"
  val CancelLastEth="l"
  val SoldLastSaleEth="m"
  val CancelLast="n"
  val SoldLastSale="o"
  val CancelOpen="p"
  val CancelOpenEth="q"
  val OpenedSaleEth="r"
  val CancelOnly="s"
  val CancelOnlyEth="t"
  val LateOpenEth="u"
  val AutoExecutionEth="v"
  val Reopen="w"
  val ReopenEth="x"
  val Adjusted="y"
  val AdjustedEth="z"
  val Spread="AA"
  val SpreadEth="AB"
  val Straddle="AC"
  val StraddleEth="AD"
  val Stopped="AE"
  val StoppedEth="AF"
  val RegularEth="AG"
  val Combo="AH"
  val ComboEth="AI"
  val OfficialClosingPrice="AJ"
  val PriorReferencePrice="AK"
  val StoppedSoldLast="AL"
  val StoppedOutOfSequence="AM"
  val OfficalClosingPrice="AN"
  val Crossed2="AO"
  val FastMarket="AP"
  val AutomaticExecution="AQ"
  val FormT="AR"
  val BasketIndex="AS"
  val BurstBasket="AT"
  val NoMarketActivity="1000"
  val NoDataAvailable="1001"
  val NotApplicable="1002"
  lazy val fixDescriptionByValue = Map("A"->"CASH_MARKET","B"->"AVERAGE_PRICE_TRADE",
    "C"->"CASH_TRADE","D"->"NEXT_DAY_MARKET","E"->"OPENING_REOPENING_TRADE_DETAIL",
    "F"->"INTRADAY_TRADE_DETAIL","G"->"RULE127","H"->"RULE155",
    "I"->"SOLD_LAST","J"->"NEXT_DAY_TRADE","K"->"OPENED",
    "L"->"SELLER","M"->"SOLD","N"->"STOPPED_STOCK",
    "P"->"IMBALANCE_MORE_BUYERS","Q"->"IMBALANCE_MORE_SELLERS","R"->"OPENING_PRICE",
    "Y"->"TRADES_RESULTING_FROM_MANUAL_SLOW_QUOTE","Z"->"TRADES_RESULTING_FROM_INTERMARKET_SWEEP","S"->"BARGAIN_CONDITION",
    "T"->"CONVERTED_PRICE_INDICATOR","U"->"EXCHANGE_LAST","V"->"FINAL_PRICE_OF_SESSION",
    "W"->"EX_PIT","X"->"CROSSED","0"->"CANCEL",
    "a"->"VOLUME_ONLY","b"->"DIRECT_PLUS","c"->"ACQUISITION",
    "d"->"BUNCHED","e"->"DISTRIBUTION","f"->"BUNCHED_SALE",
    "g"->"SPLIT_TRADE","h"->"CANCEL_STOPPED","i"->"CANCEL_ETH",
    "j"->"CANCEL_STOPPED_ETH","k"->"OUT_OF_SEQUENCE_ETH","l"->"CANCEL_LAST_ETH",
    "m"->"SOLD_LAST_SALE_ETH","n"->"CANCEL_LAST","o"->"SOLD_LAST_SALE",
    "p"->"CANCEL_OPEN","q"->"CANCEL_OPEN_ETH","r"->"OPENED_SALE_ETH",
    "s"->"CANCEL_ONLY","t"->"CANCEL_ONLY_ETH","u"->"LATE_OPEN_ETH",
    "v"->"AUTO_EXECUTION_ETH","w"->"REOPEN","x"->"REOPEN_ETH",
    "y"->"ADJUSTED","z"->"ADJUSTED_ETH","AA"->"SPREAD",
    "AB"->"SPREAD_ETH","AC"->"STRADDLE","AD"->"STRADDLE_ETH",
    "AE"->"STOPPED","AF"->"STOPPED_ETH","AG"->"REGULAR_ETH",
    "AH"->"COMBO","AI"->"COMBO_ETH","AJ"->"OFFICIAL_CLOSING_PRICE",
    "AK"->"PRIOR_REFERENCE_PRICE","AL"->"STOPPED_SOLD_LAST","AM"->"STOPPED_OUT_OF_SEQUENCE",
    "AN"->"OFFICAL_CLOSING_PRICE","AO"->"CROSSED2","AP"->"FAST_MARKET",
    "AQ"->"AUTOMATIC_EXECUTION","AR"->"FORM_T","AS"->"BASKET_INDEX",
    "AT"->"BURST_BASKET","1000"->"NO_MARKET_ACTIVITY","1001"->"NO_DATA_AVAILABLE",
    "1002"->"NOT_APPLICABLE")
 
  def decode(a: Option[Any]) : Option[TradeConditionField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TradeConditionField]
  }

  def decode(a: Any) : Option[TradeConditionField] = a match {
    case v: String => Some(TradeConditionField(v))
    case v: TradeConditionField => Some(v)
    case _ => scala.Option.empty[TradeConditionField]
  } 
}
