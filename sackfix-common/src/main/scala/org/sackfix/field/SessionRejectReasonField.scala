package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class SessionRejectReasonField(override val value: Int) extends SfFieldInt(373, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(373)SessionRejectReason=(").append(value).append(")").append(SessionRejectReasonField.fixDescriptionByValue.getOrElse(value,""))
}

object SessionRejectReasonField {
  val TagId = 373 
  val InvalidTagNumber=0
  val RequiredTagMissing=1
  val SendingtimeAccuracyProblem=10
  val InvalidMsgtype=11
  val XmlValidationError=12
  val TagAppearsMoreThanOnce=13
  val TagSpecifiedOutOfRequiredOrder=14
  val RepeatingGroupFieldsOutOfOrder=15
  val IncorrectNumingroupCountForRepeatingGroup=16
  val NonDataValueIncludesFieldDelimiter=17
  val TagNotDefinedForThisMessageType=2
  val UndefinedTag=3
  val TagSpecifiedWithoutAValue=4
  val ValueIsIncorrect=5
  val IncorrectDataFormatForValue=6
  val DecryptionProblem=7
  val SignatureProblem=8
  val CompidProblem=9
  val Other=99
  lazy val fixDescriptionByValue = Map(0->"INVALID_TAG_NUMBER",1->"REQUIRED_TAG_MISSING",
    10->"SENDINGTIME_ACCURACY_PROBLEM",11->"INVALID_MSGTYPE",12->"XML_VALIDATION_ERROR",
    13->"TAG_APPEARS_MORE_THAN_ONCE",14->"TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER",15->"REPEATING_GROUP_FIELDS_OUT_OF_ORDER",
    16->"INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP",17->"NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER",2->"TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE",
    3->"UNDEFINED_TAG",4->"TAG_SPECIFIED_WITHOUT_A_VALUE",5->"VALUE_IS_INCORRECT",
    6->"INCORRECT_DATA_FORMAT_FOR_VALUE",7->"DECRYPTION_PROBLEM",8->"SIGNATURE_PROBLEM",
    9->"COMPID_PROBLEM",99->"OTHER")
 
  def apply(value: String) = try {
    new SessionRejectReasonField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new SessionRejectReason("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[SessionRejectReasonField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SessionRejectReasonField]
  }

  def decode(a: Any) : Option[SessionRejectReasonField] = a match {
    case v: String => Some(SessionRejectReasonField(v))
    case v: Int => Some(SessionRejectReasonField(v))
    case v: SessionRejectReasonField => Some(v)
    case _ => scala.Option.empty[SessionRejectReasonField]
  } 
}
