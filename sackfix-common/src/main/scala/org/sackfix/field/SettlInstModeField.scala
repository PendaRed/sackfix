package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class SettlInstModeField(override val value: String) extends SfFieldString(160, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(160)SettlInstMode=(").append(value).append(")").append(SettlInstModeField.fixDescriptionByValue.getOrElse(value,""))
}

object SettlInstModeField {
  val TagId = 160 
  val Default="0"
  val StandingInstructionsProvided="1"
  val SpecificAllocationAccountOverriding="2"
  val SpecificAllocationAccountStanding="3"
  val SpecificOrderForASingleAccount="4"
  val RequestReject="5"
  lazy val fixDescriptionByValue = Map("0"->"DEFAULT","1"->"STANDING_INSTRUCTIONS_PROVIDED",
    "2"->"SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING","3"->"SPECIFIC_ALLOCATION_ACCOUNT_STANDING","4"->"SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT",
    "5"->"REQUEST_REJECT")
 
  def decode(a: Option[Any]) : Option[SettlInstModeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SettlInstModeField]
  }

  def decode(a: Any) : Option[SettlInstModeField] = a match {
    case v: String => Some(SettlInstModeField(v))
    case v: Char => Some(SettlInstModeField(v.toString))
    case v: SettlInstModeField => Some(v)
    case _ => scala.Option.empty[SettlInstModeField]
  } 
}
