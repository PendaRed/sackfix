package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class ComplexEventPriceBoundaryMethodField(override val value: Int) extends SfFieldInt(1487, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1487)ComplexEventPriceBoundaryMethod=(").append(value).append(")").append(ComplexEventPriceBoundaryMethodField.fixDescriptionByValue.getOrElse(value,""))
}

object ComplexEventPriceBoundaryMethodField {
  val TagId = 1487 
  val LessThanComplexeventprice=1
  val LessThanOrEqualToComplexeventprice=2
  val EqualToComplexeventprice=3
  val GreaterThanOrEqualToComplexeventprice=4
  val GreaterThanComplexeventprice=5
  lazy val fixDescriptionByValue = Map(1->"LESS_THAN_COMPLEXEVENTPRICE",2->"LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE",
    3->"EQUAL_TO_COMPLEXEVENTPRICE",4->"GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE",5->"GREATER_THAN_COMPLEXEVENTPRICE")
 
  def apply(value: String) = try {
    new ComplexEventPriceBoundaryMethodField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ComplexEventPriceBoundaryMethod("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ComplexEventPriceBoundaryMethodField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ComplexEventPriceBoundaryMethodField]
  }

  def decode(a: Any) : Option[ComplexEventPriceBoundaryMethodField] = a match {
    case v: String => Some(ComplexEventPriceBoundaryMethodField(v))
    case v: Int => Some(ComplexEventPriceBoundaryMethodField(v))
    case v: ComplexEventPriceBoundaryMethodField => Some(v)
    case _ => scala.Option.empty[ComplexEventPriceBoundaryMethodField]
  } 
}
