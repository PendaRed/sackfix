package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class MDReqRejReasonField(override val value: String) extends SfFieldString(281, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(281)MDReqRejReason=(").append(value).append(")").append(MDReqRejReasonField.fixDescriptionByValue.getOrElse(value,""))
}

object MDReqRejReasonField {
  val TagId = 281 
  val UnknownSymbol="0"
  val DuplicateMdreqid="1"
  val InsufficientBandwidth="2"
  val InsufficientPermissions="3"
  val UnsupportedSubscriptionrequesttype="4"
  val UnsupportedMarketdepth="5"
  val UnsupportedMdupdatetype="6"
  val UnsupportedAggregatedbook="7"
  val UnsupportedMdentrytype="8"
  val UnsupportedTradingsessionid="9"
  val UnsupportedScope="A"
  val UnsupportedOpenclosesettleflag="B"
  val UnsupportedMdimplicitdelete="C"
  val InsufficientCredit="D"
  lazy val fixDescriptionByValue = Map("0"->"UNKNOWN_SYMBOL","1"->"DUPLICATE_MDREQID",
    "2"->"INSUFFICIENT_BANDWIDTH","3"->"INSUFFICIENT_PERMISSIONS","4"->"UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE",
    "5"->"UNSUPPORTED_MARKETDEPTH","6"->"UNSUPPORTED_MDUPDATETYPE","7"->"UNSUPPORTED_AGGREGATEDBOOK",
    "8"->"UNSUPPORTED_MDENTRYTYPE","9"->"UNSUPPORTED_TRADINGSESSIONID","A"->"UNSUPPORTED_SCOPE",
    "B"->"UNSUPPORTED_OPENCLOSESETTLEFLAG","C"->"UNSUPPORTED_MDIMPLICITDELETE","D"->"INSUFFICIENT_CREDIT")
 
  def decode(a: Option[Any]) : Option[MDReqRejReasonField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MDReqRejReasonField]
  }

  def decode(a: Any) : Option[MDReqRejReasonField] = a match {
    case v: String => Some(MDReqRejReasonField(v))
    case v: Char => Some(MDReqRejReasonField(v.toString))
    case v: MDReqRejReasonField => Some(v)
    case _ => scala.Option.empty[MDReqRejReasonField]
  } 
}
