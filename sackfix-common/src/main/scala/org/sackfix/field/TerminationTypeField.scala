package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class TerminationTypeField(override val value: Int) extends SfFieldInt(788, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(788)TerminationType=(").append(value).append(")").append(TerminationTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object TerminationTypeField {
  val TagId = 788 
  val Overnight=1
  val Term=2
  val Flexible=3
  val Open=4
  lazy val fixDescriptionByValue = Map(1->"OVERNIGHT",2->"TERM",
    3->"FLEXIBLE",4->"OPEN")
 
  def apply(value: String) = try {
    new TerminationTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TerminationType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TerminationTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TerminationTypeField]
  }

  def decode(a: Any) : Option[TerminationTypeField] = a match {
    case v: String => Some(TerminationTypeField(v))
    case v: Int => Some(TerminationTypeField(v))
    case v: TerminationTypeField => Some(v)
    case _ => scala.Option.empty[TerminationTypeField]
  } 
}
