package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class SettlInstReqRejCodeField(override val value: Int) extends SfFieldInt(792, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(792)SettlInstReqRejCode=(").append(value).append(")").append(SettlInstReqRejCodeField.fixDescriptionByValue.getOrElse(value,""))
}

object SettlInstReqRejCodeField {
  val TagId = 792 
  val UnableToProcessRequest=0
  val UnknownAccount=1
  val NoMatchingSettlementInstructionsFound=2
  val Other=99
  lazy val fixDescriptionByValue = Map(0->"UNABLE_TO_PROCESS_REQUEST",1->"UNKNOWN_ACCOUNT",
    2->"NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND",99->"OTHER")
 
  def apply(value: String) = try {
    new SettlInstReqRejCodeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new SettlInstReqRejCode("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[SettlInstReqRejCodeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SettlInstReqRejCodeField]
  }

  def decode(a: Any) : Option[SettlInstReqRejCodeField] = a match {
    case v: String => Some(SettlInstReqRejCodeField(v))
    case v: Int => Some(SettlInstReqRejCodeField(v))
    case v: SettlInstReqRejCodeField => Some(v)
    case _ => scala.Option.empty[SettlInstReqRejCodeField]
  } 
}
