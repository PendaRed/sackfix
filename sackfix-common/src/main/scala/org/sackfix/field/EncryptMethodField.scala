package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class EncryptMethodField(override val value: Int) extends SfFieldInt(98, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(98)EncryptMethod=(").append(value).append(")").append(EncryptMethodField.fixDescriptionByValue.getOrElse(value,""))
}

object EncryptMethodField {
  val TagId = 98 
  val NoneOther=0
  val Pkcs=1
  val Des=2
  val PkcsDes=3
  val PgpDes=4
  val PgpDesMd5=5
  val PemDesMd5=6
  lazy val fixDescriptionByValue = Map(0->"NONE_OTHER",1->"PKCS",
    2->"DES",3->"PKCS_DES",4->"PGP_DES",
    5->"PGP_DES_MD5",6->"PEM_DES_MD5")
 
  def apply(value: String) = try {
    new EncryptMethodField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new EncryptMethod("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[EncryptMethodField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[EncryptMethodField]
  }

  def decode(a: Any) : Option[EncryptMethodField] = a match {
    case v: String => Some(EncryptMethodField(v))
    case v: Int => Some(EncryptMethodField(v))
    case v: EncryptMethodField => Some(v)
    case _ => scala.Option.empty[EncryptMethodField]
  } 
}
