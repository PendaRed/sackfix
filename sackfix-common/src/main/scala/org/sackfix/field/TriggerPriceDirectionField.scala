package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class TriggerPriceDirectionField(override val value: String) extends SfFieldString(1109, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1109)TriggerPriceDirection=(").append(value).append(")").append(TriggerPriceDirectionField.fixDescriptionByValue.getOrElse(value,""))
}

object TriggerPriceDirectionField {
  val TagId = 1109 
  val TriggerIfThePriceOfTheSpecifiedTypeGoesUpToOrThroughTheSpecifiedTriggerPrice="U"
  val TriggerIfThePriceOfTheSpecifiedTypeGoesDownToOrThroughTheSpecifiedTriggerPrice="D"
  lazy val fixDescriptionByValue = Map("U"->"TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE","D"->"TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE")
 
  def decode(a: Option[Any]) : Option[TriggerPriceDirectionField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TriggerPriceDirectionField]
  }

  def decode(a: Any) : Option[TriggerPriceDirectionField] = a match {
    case v: String => Some(TriggerPriceDirectionField(v))
    case v: Char => Some(TriggerPriceDirectionField(v.toString))
    case v: TriggerPriceDirectionField => Some(v)
    case _ => scala.Option.empty[TriggerPriceDirectionField]
  } 
}
