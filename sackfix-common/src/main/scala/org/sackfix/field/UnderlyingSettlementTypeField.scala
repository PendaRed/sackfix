package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class UnderlyingSettlementTypeField(override val value: Int) extends SfFieldInt(975, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(975)UnderlyingSettlementType=(").append(value).append(")").append(UnderlyingSettlementTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object UnderlyingSettlementTypeField {
  val TagId = 975 
  val Tp1=2
  val Tp3=4
  val Tp4=5
  lazy val fixDescriptionByValue = Map(2->"Tp1",4->"Tp3",
    5->"Tp4")
 
  def apply(value: String) = try {
    new UnderlyingSettlementTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new UnderlyingSettlementType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[UnderlyingSettlementTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[UnderlyingSettlementTypeField]
  }

  def decode(a: Any) : Option[UnderlyingSettlementTypeField] = a match {
    case v: String => Some(UnderlyingSettlementTypeField(v))
    case v: Int => Some(UnderlyingSettlementTypeField(v))
    case v: UnderlyingSettlementTypeField => Some(v)
    case _ => scala.Option.empty[UnderlyingSettlementTypeField]
  } 
}
