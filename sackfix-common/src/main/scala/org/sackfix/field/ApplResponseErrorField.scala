package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class ApplResponseErrorField(override val value: Int) extends SfFieldInt(1354, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1354)ApplResponseError=(").append(value).append(")").append(ApplResponseErrorField.fixDescriptionByValue.getOrElse(value,""))
}

object ApplResponseErrorField {
  val TagId = 1354 
  val ApplicationDoesNotExist=0
  val MessagesRequestedAreNotAvailable=1
  val UserNotAuthorizedForApplication=2
  lazy val fixDescriptionByValue = Map(0->"APPLICATION_DOES_NOT_EXIST",1->"MESSAGES_REQUESTED_ARE_NOT_AVAILABLE",
    2->"USER_NOT_AUTHORIZED_FOR_APPLICATION")
 
  def apply(value: String) = try {
    new ApplResponseErrorField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ApplResponseError("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ApplResponseErrorField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ApplResponseErrorField]
  }

  def decode(a: Any) : Option[ApplResponseErrorField] = a match {
    case v: String => Some(ApplResponseErrorField(v))
    case v: Int => Some(ApplResponseErrorField(v))
    case v: ApplResponseErrorField => Some(v)
    case _ => scala.Option.empty[ApplResponseErrorField]
  } 
}
