package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class TradSesEventField(override val value: Int) extends SfFieldInt(1368, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1368)TradSesEvent=(").append(value).append(")").append(TradSesEventField.fixDescriptionByValue.getOrElse(value,""))
}

object TradSesEventField {
  val TagId = 1368 
  val TradingResumes=0
  val ChangeOfTradingSession=1
  val ChangeOfTradingSubsession=2
  val ChangeOfTradingStatus=3
  lazy val fixDescriptionByValue = Map(0->"TRADING_RESUMES",1->"CHANGE_OF_TRADING_SESSION",
    2->"CHANGE_OF_TRADING_SUBSESSION",3->"CHANGE_OF_TRADING_STATUS")
 
  def apply(value: String) = try {
    new TradSesEventField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TradSesEvent("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TradSesEventField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TradSesEventField]
  }

  def decode(a: Any) : Option[TradSesEventField] = a match {
    case v: String => Some(TradSesEventField(v))
    case v: Int => Some(TradSesEventField(v))
    case v: TradSesEventField => Some(v)
    case _ => scala.Option.empty[TradSesEventField]
  } 
}
