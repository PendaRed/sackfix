package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class AllocSettlInstTypeField(override val value: Int) extends SfFieldInt(780, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(780)AllocSettlInstType=(").append(value).append(")").append(AllocSettlInstTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object AllocSettlInstTypeField {
  val TagId = 780 
  val UseDefaultInstructions=0
  val DeriveFromParametersProvided=1
  val FullDetailsProvided=2
  val SsiDbIdsProvided=3
  val PhoneForInstructions=4
  lazy val fixDescriptionByValue = Map(0->"USE_DEFAULT_INSTRUCTIONS",1->"DERIVE_FROM_PARAMETERS_PROVIDED",
    2->"FULL_DETAILS_PROVIDED",3->"SSI_DB_IDS_PROVIDED",4->"PHONE_FOR_INSTRUCTIONS")
 
  def apply(value: String) = try {
    new AllocSettlInstTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new AllocSettlInstType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[AllocSettlInstTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[AllocSettlInstTypeField]
  }

  def decode(a: Any) : Option[AllocSettlInstTypeField] = a match {
    case v: String => Some(AllocSettlInstTypeField(v))
    case v: Int => Some(AllocSettlInstTypeField(v))
    case v: AllocSettlInstTypeField => Some(v)
    case _ => scala.Option.empty[AllocSettlInstTypeField]
  } 
}
