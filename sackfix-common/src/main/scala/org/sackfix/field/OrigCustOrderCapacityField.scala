package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class OrigCustOrderCapacityField(override val value: Int) extends SfFieldInt(1432, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1432)OrigCustOrderCapacity=(").append(value).append(")").append(OrigCustOrderCapacityField.fixDescriptionByValue.getOrElse(value,""))
}

object OrigCustOrderCapacityField {
  val TagId = 1432 
  val MemberTradingForTheirOwnAccount=1
  val ClearingFirmTradingForItsProprietaryAccount=2
  val MemberTradingForAnotherMember=3
  val AllOther=4
  lazy val fixDescriptionByValue = Map(1->"MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT",2->"CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT",
    3->"MEMBER_TRADING_FOR_ANOTHER_MEMBER",4->"ALL_OTHER")
 
  def apply(value: String) = try {
    new OrigCustOrderCapacityField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new OrigCustOrderCapacity("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[OrigCustOrderCapacityField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[OrigCustOrderCapacityField]
  }

  def decode(a: Any) : Option[OrigCustOrderCapacityField] = a match {
    case v: String => Some(OrigCustOrderCapacityField(v))
    case v: Int => Some(OrigCustOrderCapacityField(v))
    case v: OrigCustOrderCapacityField => Some(v)
    case _ => scala.Option.empty[OrigCustOrderCapacityField]
  } 
}
