package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class UnderlyingSettlPriceTypeField(override val value: Int) extends SfFieldInt(733, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(733)UnderlyingSettlPriceType=(").append(value).append(")")
}

object UnderlyingSettlPriceTypeField {
  val TagId = 733  
  def apply(value: String) = try {
    new UnderlyingSettlPriceTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new UnderlyingSettlPriceType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[UnderlyingSettlPriceTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[UnderlyingSettlPriceTypeField]
  }

  def decode(a: Any) : Option[UnderlyingSettlPriceTypeField] = a match {
    case v: String => Some(UnderlyingSettlPriceTypeField(v))
    case v: Int => Some(UnderlyingSettlPriceTypeField(v))
    case v: UnderlyingSettlPriceTypeField => Some(v)
    case _ => scala.Option.empty[UnderlyingSettlPriceTypeField]
  } 
}
