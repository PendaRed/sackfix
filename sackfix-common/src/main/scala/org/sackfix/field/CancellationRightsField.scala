package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class CancellationRightsField(override val value: String) extends SfFieldString(480, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(480)CancellationRights=(").append(value).append(")").append(CancellationRightsField.fixDescriptionByValue.getOrElse(value,""))
}

object CancellationRightsField {
  val TagId = 480 
  val NoExecutionOnly="N"
  val NoWaiverAgreement="M"
  val NoInstitutional="O"
  val Yes="Y"
  lazy val fixDescriptionByValue = Map("N"->"NO_EXECUTION_ONLY","M"->"NO_WAIVER_AGREEMENT",
    "O"->"NO_INSTITUTIONAL","Y"->"YES")
 
  def decode(a: Option[Any]) : Option[CancellationRightsField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[CancellationRightsField]
  }

  def decode(a: Any) : Option[CancellationRightsField] = a match {
    case v: String => Some(CancellationRightsField(v))
    case v: Char => Some(CancellationRightsField(v.toString))
    case v: CancellationRightsField => Some(v)
    case _ => scala.Option.empty[CancellationRightsField]
  } 
}
