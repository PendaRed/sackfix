package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class ConfirmStatusField(override val value: Int) extends SfFieldInt(665, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(665)ConfirmStatus=(").append(value).append(")").append(ConfirmStatusField.fixDescriptionByValue.getOrElse(value,""))
}

object ConfirmStatusField {
  val TagId = 665 
  val Received=1
  val MismatchedAccount=2
  val MissingSettlementInstructions=3
  val Confirmed=4
  val RequestRejected=5
  lazy val fixDescriptionByValue = Map(1->"RECEIVED",2->"MISMATCHED_ACCOUNT",
    3->"MISSING_SETTLEMENT_INSTRUCTIONS",4->"CONFIRMED",5->"REQUEST_REJECTED")
 
  def apply(value: String) = try {
    new ConfirmStatusField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ConfirmStatus("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ConfirmStatusField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ConfirmStatusField]
  }

  def decode(a: Any) : Option[ConfirmStatusField] = a match {
    case v: String => Some(ConfirmStatusField(v))
    case v: Int => Some(ConfirmStatusField(v))
    case v: ConfirmStatusField => Some(v)
    case _ => scala.Option.empty[ConfirmStatusField]
  } 
}
