package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class OrdRejReasonField(override val value: Int) extends SfFieldInt(103, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(103)OrdRejReason=(").append(value).append(")").append(OrdRejReasonField.fixDescriptionByValue.getOrElse(value,""))
}

object OrdRejReasonField {
  val TagId = 103 
  val BrokerExchangeOption=0
  val UnknownSymbol=1
  val ExchangeClosed=2
  val OrderExceedsLimit=3
  val TooLateToEnter=4
  val UnknownOrder=5
  val DuplicateOrder=6
  val DuplicateOfAVerballyCommunicatedOrder=7
  val StaleOrder=8
  val TradeAlongRequired=9
  val InvalidInvestorId=10
  val UnsupportedOrderCharacteristic=11
  val SurveillenceOption=12
  val IncorrectQuantity=13
  val IncorrectAllocatedQuantity=14
  val UnknownAccount=15
  val InvalidPriceIncrement=18
  val Other=99
  lazy val fixDescriptionByValue = Map(0->"BROKER_EXCHANGE_OPTION",1->"UNKNOWN_SYMBOL",
    2->"EXCHANGE_CLOSED",3->"ORDER_EXCEEDS_LIMIT",4->"TOO_LATE_TO_ENTER",
    5->"UNKNOWN_ORDER",6->"DUPLICATE_ORDER",7->"DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER",
    8->"STALE_ORDER",9->"TRADE_ALONG_REQUIRED",10->"INVALID_INVESTOR_ID",
    11->"UNSUPPORTED_ORDER_CHARACTERISTIC",12->"SURVEILLENCE_OPTION",13->"INCORRECT_QUANTITY",
    14->"INCORRECT_ALLOCATED_QUANTITY",15->"UNKNOWN_ACCOUNT",18->"INVALID_PRICE_INCREMENT",
    99->"OTHER")
 
  def apply(value: String) = try {
    new OrdRejReasonField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new OrdRejReason("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[OrdRejReasonField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[OrdRejReasonField]
  }

  def decode(a: Any) : Option[OrdRejReasonField] = a match {
    case v: String => Some(OrdRejReasonField(v))
    case v: Int => Some(OrdRejReasonField(v))
    case v: OrdRejReasonField => Some(v)
    case _ => scala.Option.empty[OrdRejReasonField]
  } 
}
