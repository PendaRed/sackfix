package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class MsgDirectionField(override val value: String) extends SfFieldString(385, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(385)MsgDirection=(").append(value).append(")").append(MsgDirectionField.fixDescriptionByValue.getOrElse(value,""))
}

object MsgDirectionField {
  val TagId = 385 
  val Receive="R"
  val Send="S"
  lazy val fixDescriptionByValue = Map("R"->"RECEIVE","S"->"SEND")
 
  def decode(a: Option[Any]) : Option[MsgDirectionField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MsgDirectionField]
  }

  def decode(a: Any) : Option[MsgDirectionField] = a match {
    case v: String => Some(MsgDirectionField(v))
    case v: Char => Some(MsgDirectionField(v.toString))
    case v: MsgDirectionField => Some(v)
    case _ => scala.Option.empty[MsgDirectionField]
  } 
}
