package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class SettlCurrFxRateCalcField(override val value: String) extends SfFieldString(156, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(156)SettlCurrFxRateCalc=(").append(value).append(")").append(SettlCurrFxRateCalcField.fixDescriptionByValue.getOrElse(value,""))
}

object SettlCurrFxRateCalcField {
  val TagId = 156 
  val Multiply="M"
  val Divide="D"
  lazy val fixDescriptionByValue = Map("M"->"MULTIPLY","D"->"DIVIDE")
 
  def decode(a: Option[Any]) : Option[SettlCurrFxRateCalcField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SettlCurrFxRateCalcField]
  }

  def decode(a: Any) : Option[SettlCurrFxRateCalcField] = a match {
    case v: String => Some(SettlCurrFxRateCalcField(v))
    case v: Char => Some(SettlCurrFxRateCalcField(v.toString))
    case v: SettlCurrFxRateCalcField => Some(v)
    case _ => scala.Option.empty[SettlCurrFxRateCalcField]
  } 
}
