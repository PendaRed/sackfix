package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class NetworkRequestTypeField(override val value: Int) extends SfFieldInt(935, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(935)NetworkRequestType=(").append(value).append(")").append(NetworkRequestTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object NetworkRequestTypeField {
  val TagId = 935 
  val Snapshot=1
  val Subscribe=2
  val StopSubscribing=4
  val LevelOfDetail=8
  lazy val fixDescriptionByValue = Map(1->"SNAPSHOT",2->"SUBSCRIBE",
    4->"STOP_SUBSCRIBING",8->"LEVEL_OF_DETAIL")
 
  def apply(value: String) = try {
    new NetworkRequestTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new NetworkRequestType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[NetworkRequestTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[NetworkRequestTypeField]
  }

  def decode(a: Any) : Option[NetworkRequestTypeField] = a match {
    case v: String => Some(NetworkRequestTypeField(v))
    case v: Int => Some(NetworkRequestTypeField(v))
    case v: NetworkRequestTypeField => Some(v)
    case _ => scala.Option.empty[NetworkRequestTypeField]
  } 
}
