package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class CollStatusField(override val value: Int) extends SfFieldInt(910, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(910)CollStatus=(").append(value).append(")").append(CollStatusField.fixDescriptionByValue.getOrElse(value,""))
}

object CollStatusField {
  val TagId = 910 
  val Unassigned=0
  val PartiallyAssigned=1
  val AssignmentProposed=2
  val Assigned=3
  val Challenged=4
  lazy val fixDescriptionByValue = Map(0->"UNASSIGNED",1->"PARTIALLY_ASSIGNED",
    2->"ASSIGNMENT_PROPOSED",3->"ASSIGNED",4->"CHALLENGED")
 
  def apply(value: String) = try {
    new CollStatusField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new CollStatus("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[CollStatusField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[CollStatusField]
  }

  def decode(a: Any) : Option[CollStatusField] = a match {
    case v: String => Some(CollStatusField(v))
    case v: Int => Some(CollStatusField(v))
    case v: CollStatusField => Some(v)
    case _ => scala.Option.empty[CollStatusField]
  } 
}
