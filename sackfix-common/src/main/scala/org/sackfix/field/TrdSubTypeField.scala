package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class TrdSubTypeField(override val value: Int) extends SfFieldInt(829, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(829)TrdSubType=(").append(value).append(")").append(TrdSubTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object TrdSubTypeField {
  val TagId = 829 
  val Cmta=0
  val InternalTransferOrAdjustment=1
  val ExternalTransferOrTransferOfAccount=2
  val RejectForSubmittingSide=3
  val AdvisoryForContraSide=4
  val OffsetDueToAnAllocation=5
  val OnsetDutToAnAllocation=6
  val DifferentialSpread=7
  val ImpliedSpreadLegExecutedAgainstAnOutright=8
  val TransactionFromExercise=9
  val TransactionFromAssignment=10
  val Acats=11
  val Ai=14
  val B=15
  val K=16
  val Lc=17
  val M=18
  val N=19
  val Nm=20
  val Nr=21
  val P=22
  val Pa=23
  val Pc=24
  val Pn=25
  val R=26
  val Ro=27
  val Rt=28
  val Sw=29
  val T=30
  val Wn=31
  val Wt=32
  lazy val fixDescriptionByValue = Map(0->"CMTA",1->"INTERNAL_TRANSFER_OR_ADJUSTMENT",
    2->"EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT",3->"REJECT_FOR_SUBMITTING_SIDE",4->"ADVISORY_FOR_CONTRA_SIDE",
    5->"OFFSET_DUE_TO_AN_ALLOCATION",6->"ONSET_DUT_TO_AN_ALLOCATION",7->"DIFFERENTIAL_SPREAD",
    8->"IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT",9->"TRANSACTION_FROM_EXERCISE",10->"TRANSACTION_FROM_ASSIGNMENT",
    11->"ACATS",14->"AI",15->"B",
    16->"K",17->"LC",18->"M",
    19->"N",20->"NM",21->"NR",
    22->"P",23->"PA",24->"PC",
    25->"PN",26->"R",27->"RO",
    28->"RT",29->"SW",30->"T",
    31->"WN",32->"WT")
 
  def apply(value: String) = try {
    new TrdSubTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TrdSubType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TrdSubTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TrdSubTypeField]
  }

  def decode(a: Any) : Option[TrdSubTypeField] = a match {
    case v: String => Some(TrdSubTypeField(v))
    case v: Int => Some(TrdSubTypeField(v))
    case v: TrdSubTypeField => Some(v)
    case _ => scala.Option.empty[TrdSubTypeField]
  } 
}
