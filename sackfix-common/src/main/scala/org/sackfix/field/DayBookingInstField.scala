package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class DayBookingInstField(override val value: String) extends SfFieldString(589, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(589)DayBookingInst=(").append(value).append(")").append(DayBookingInstField.fixDescriptionByValue.getOrElse(value,""))
}

object DayBookingInstField {
  val TagId = 589 
  val CanTriggerBookingWithoutReferenceToTheOrderInitiator="0"
  val SpeakWithOrderInitiatorBeforeBooking="1"
  val Accumulate="2"
  lazy val fixDescriptionByValue = Map("0"->"CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR","1"->"SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING",
    "2"->"ACCUMULATE")
 
  def decode(a: Option[Any]) : Option[DayBookingInstField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[DayBookingInstField]
  }

  def decode(a: Any) : Option[DayBookingInstField] = a match {
    case v: String => Some(DayBookingInstField(v))
    case v: Char => Some(DayBookingInstField(v.toString))
    case v: DayBookingInstField => Some(v)
    case _ => scala.Option.empty[DayBookingInstField]
  } 
}
