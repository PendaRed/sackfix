package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class ListStatusTypeField(override val value: Int) extends SfFieldInt(429, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(429)ListStatusType=(").append(value).append(")").append(ListStatusTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object ListStatusTypeField {
  val TagId = 429 
  val Ack=1
  val Response=2
  val Timed=3
  val Execstarted=4
  val Alldone=5
  val Alert=6
  lazy val fixDescriptionByValue = Map(1->"ACK",2->"RESPONSE",
    3->"TIMED",4->"EXECSTARTED",5->"ALLDONE",
    6->"ALERT")
 
  def apply(value: String) = try {
    new ListStatusTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ListStatusType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ListStatusTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ListStatusTypeField]
  }

  def decode(a: Any) : Option[ListStatusTypeField] = a match {
    case v: String => Some(ListStatusTypeField(v))
    case v: Int => Some(ListStatusTypeField(v))
    case v: ListStatusTypeField => Some(v)
    case _ => scala.Option.empty[ListStatusTypeField]
  } 
}
