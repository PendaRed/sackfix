package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class MaturityMonthYearFormatField(override val value: Int) extends SfFieldInt(1303, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1303)MaturityMonthYearFormat=(").append(value).append(")").append(MaturityMonthYearFormatField.fixDescriptionByValue.getOrElse(value,""))
}

object MaturityMonthYearFormatField {
  val TagId = 1303 
  val YearmonthOnly=0
  val Yearmonthday=1
  val Yearmonthweek=2
  lazy val fixDescriptionByValue = Map(0->"YEARMONTH_ONLY",1->"YEARMONTHDAY",
    2->"YEARMONTHWEEK")
 
  def apply(value: String) = try {
    new MaturityMonthYearFormatField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new MaturityMonthYearFormat("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[MaturityMonthYearFormatField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MaturityMonthYearFormatField]
  }

  def decode(a: Any) : Option[MaturityMonthYearFormatField] = a match {
    case v: String => Some(MaturityMonthYearFormatField(v))
    case v: Int => Some(MaturityMonthYearFormatField(v))
    case v: MaturityMonthYearFormatField => Some(v)
    case _ => scala.Option.empty[MaturityMonthYearFormatField]
  } 
}
