package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class MultiLegRptTypeReqField(override val value: Int) extends SfFieldInt(563, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(563)MultiLegRptTypeReq=(").append(value).append(")").append(MultiLegRptTypeReqField.fixDescriptionByValue.getOrElse(value,""))
}

object MultiLegRptTypeReqField {
  val TagId = 563 
  val ReportByMulitlegSecurityOnly=0
  val ReportByMultilegSecurityAndByInstrumentLegsBelongingToTheMultilegSecurity=1
  val ReportByInstrumentLegsBelongingToTheMultilegSecurityOnly=2
  lazy val fixDescriptionByValue = Map(0->"REPORT_BY_MULITLEG_SECURITY_ONLY",1->"REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY",
    2->"REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY")
 
  def apply(value: String) = try {
    new MultiLegRptTypeReqField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new MultiLegRptTypeReq("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[MultiLegRptTypeReqField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MultiLegRptTypeReqField]
  }

  def decode(a: Any) : Option[MultiLegRptTypeReqField] = a match {
    case v: String => Some(MultiLegRptTypeReqField(v))
    case v: Int => Some(MultiLegRptTypeReqField(v))
    case v: MultiLegRptTypeReqField => Some(v)
    case _ => scala.Option.empty[MultiLegRptTypeReqField]
  } 
}
