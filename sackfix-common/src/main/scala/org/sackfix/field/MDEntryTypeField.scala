package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class MDEntryTypeField(override val value: String) extends SfFieldString(269, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(269)MDEntryType=(").append(value).append(")").append(MDEntryTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object MDEntryTypeField {
  val TagId = 269 
  val Bid="0"
  val Offer="1"
  val Trade="2"
  val IndexValue="3"
  val OpeningPrice="4"
  val ClosingPrice="5"
  val SettlementPrice="6"
  val TradingSessionHighPrice="7"
  val TradingSessionLowPrice="8"
  val TradingSessionVwapPrice="9"
  val Imbalance="A"
  val TradeVolume="B"
  val OpenInterest="C"
  val CompositeUnderlyingPrice="D"
  val SimulatedSellPrice="E"
  val SimulatedBuyPrice="F"
  val MarginRate="G"
  val MidPrice="H"
  val EmptyBook="J"
  val SettleHighPrice="K"
  val SettleLowPrice="L"
  val PriorSettlePrice="M"
  val SessionHighBid="N"
  val SessionLowOffer="O"
  val EarlyPrices="P"
  val AuctionClearingPrice="Q"
  lazy val fixDescriptionByValue = Map("0"->"BID","1"->"OFFER",
    "2"->"TRADE","3"->"INDEX_VALUE","4"->"OPENING_PRICE",
    "5"->"CLOSING_PRICE","6"->"SETTLEMENT_PRICE","7"->"TRADING_SESSION_HIGH_PRICE",
    "8"->"TRADING_SESSION_LOW_PRICE","9"->"TRADING_SESSION_VWAP_PRICE","A"->"IMBALANCE",
    "B"->"TRADE_VOLUME","C"->"OPEN_INTEREST","D"->"COMPOSITE_UNDERLYING_PRICE",
    "E"->"SIMULATED_SELL_PRICE","F"->"SIMULATED_BUY_PRICE","G"->"MARGIN_RATE",
    "H"->"MID_PRICE","J"->"EMPTY_BOOK","K"->"SETTLE_HIGH_PRICE",
    "L"->"SETTLE_LOW_PRICE","M"->"PRIOR_SETTLE_PRICE","N"->"SESSION_HIGH_BID",
    "O"->"SESSION_LOW_OFFER","P"->"EARLY_PRICES","Q"->"AUCTION_CLEARING_PRICE")
 
  def decode(a: Option[Any]) : Option[MDEntryTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MDEntryTypeField]
  }

  def decode(a: Any) : Option[MDEntryTypeField] = a match {
    case v: String => Some(MDEntryTypeField(v))
    case v: Char => Some(MDEntryTypeField(v.toString))
    case v: MDEntryTypeField => Some(v)
    case _ => scala.Option.empty[MDEntryTypeField]
  } 
}
