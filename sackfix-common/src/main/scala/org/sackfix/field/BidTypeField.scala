package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class BidTypeField(override val value: Int) extends SfFieldInt(394, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(394)BidType=(").append(value).append(")").append(BidTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object BidTypeField {
  val TagId = 394 
  val NonDisclosed=1
  val DisclosedStyle=2
  val NoBiddingProcess=3
  lazy val fixDescriptionByValue = Map(1->"NON_DISCLOSED",2->"DISCLOSED_STYLE",
    3->"NO_BIDDING_PROCESS")
 
  def apply(value: String) = try {
    new BidTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new BidType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[BidTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[BidTypeField]
  }

  def decode(a: Any) : Option[BidTypeField] = a match {
    case v: String => Some(BidTypeField(v))
    case v: Int => Some(BidTypeField(v))
    case v: BidTypeField => Some(v)
    case _ => scala.Option.empty[BidTypeField]
  } 
}
