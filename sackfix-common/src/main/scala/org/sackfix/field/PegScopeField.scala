package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class PegScopeField(override val value: Int) extends SfFieldInt(840, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(840)PegScope=(").append(value).append(")").append(PegScopeField.fixDescriptionByValue.getOrElse(value,""))
}

object PegScopeField {
  val TagId = 840 
  val Local=1
  val National=2
  val Global=3
  val NationalExcludingLocal=4
  lazy val fixDescriptionByValue = Map(1->"LOCAL",2->"NATIONAL",
    3->"GLOBAL",4->"NATIONAL_EXCLUDING_LOCAL")
 
  def apply(value: String) = try {
    new PegScopeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new PegScope("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[PegScopeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[PegScopeField]
  }

  def decode(a: Any) : Option[PegScopeField] = a match {
    case v: String => Some(PegScopeField(v))
    case v: Int => Some(PegScopeField(v))
    case v: PegScopeField => Some(v)
    case _ => scala.Option.empty[PegScopeField]
  } 
}
