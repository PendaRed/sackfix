package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class TickDirectionField(override val value: String) extends SfFieldString(274, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(274)TickDirection=(").append(value).append(")").append(TickDirectionField.fixDescriptionByValue.getOrElse(value,""))
}

object TickDirectionField {
  val TagId = 274 
  val PlusTick="0"
  val ZeroPlusTick="1"
  val MinusTick="2"
  val ZeroMinusTick="3"
  lazy val fixDescriptionByValue = Map("0"->"PLUS_TICK","1"->"ZERO_PLUS_TICK",
    "2"->"MINUS_TICK","3"->"ZERO_MINUS_TICK")
 
  def decode(a: Option[Any]) : Option[TickDirectionField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TickDirectionField]
  }

  def decode(a: Any) : Option[TickDirectionField] = a match {
    case v: String => Some(TickDirectionField(v))
    case v: Char => Some(TickDirectionField(v.toString))
    case v: TickDirectionField => Some(v)
    case _ => scala.Option.empty[TickDirectionField]
  } 
}
