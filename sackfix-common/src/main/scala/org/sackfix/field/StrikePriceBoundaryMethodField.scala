package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class StrikePriceBoundaryMethodField(override val value: Int) extends SfFieldInt(1479, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1479)StrikePriceBoundaryMethod=(").append(value).append(")").append(StrikePriceBoundaryMethodField.fixDescriptionByValue.getOrElse(value,""))
}

object StrikePriceBoundaryMethodField {
  val TagId = 1479 
  val LessThanUnderlyingPriceIsInTheMoney=1
  val LessThanOrEqualToTheUnderlyingPriceIsInTheMoney=2
  val EqualToTheUnderlyingPriceIsInTheMoney=3
  val GreaterThanOrEqualToUnderlyingPriceIsInTheMoney=4
  val GreaterThanUnderlyingIsInTheMoney=5
  lazy val fixDescriptionByValue = Map(1->"LESS_THAN_UNDERLYING_PRICE_IS_IN_THE_MONEY",2->"LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY",
    3->"EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY",4->"GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_IN_THE_MONEY",5->"GREATER_THAN_UNDERLYING_IS_IN_THE_MONEY")
 
  def apply(value: String) = try {
    new StrikePriceBoundaryMethodField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new StrikePriceBoundaryMethod("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[StrikePriceBoundaryMethodField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[StrikePriceBoundaryMethodField]
  }

  def decode(a: Any) : Option[StrikePriceBoundaryMethodField] = a match {
    case v: String => Some(StrikePriceBoundaryMethodField(v))
    case v: Int => Some(StrikePriceBoundaryMethodField(v))
    case v: StrikePriceBoundaryMethodField => Some(v)
    case _ => scala.Option.empty[StrikePriceBoundaryMethodField]
  } 
}
