package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class CollAsgnTransTypeField(override val value: Int) extends SfFieldInt(903, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(903)CollAsgnTransType=(").append(value).append(")").append(CollAsgnTransTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object CollAsgnTransTypeField {
  val TagId = 903 
  val New=0
  val Replace=1
  val Cancel=2
  val Release=3
  val Reverse=4
  lazy val fixDescriptionByValue = Map(0->"NEW",1->"REPLACE",
    2->"CANCEL",3->"RELEASE",4->"REVERSE")
 
  def apply(value: String) = try {
    new CollAsgnTransTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new CollAsgnTransType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[CollAsgnTransTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[CollAsgnTransTypeField]
  }

  def decode(a: Any) : Option[CollAsgnTransTypeField] = a match {
    case v: String => Some(CollAsgnTransTypeField(v))
    case v: Int => Some(CollAsgnTransTypeField(v))
    case v: CollAsgnTransTypeField => Some(v)
    case _ => scala.Option.empty[CollAsgnTransTypeField]
  } 
}
