package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class ExecInstField(override val value: String) extends SfFieldString(18, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(18)ExecInst=(").append(value).append(")").append(ExecInstField.fixDescriptionByValue.getOrElse(value,""))
}

object ExecInstField {
  val TagId = 18 
  val StayOnOfferside="0"
  val NotHeld="1"
  val Work="2"
  val GoAlong="3"
  val OverTheDay="4"
  val Held="5"
  val ParticipateDontInitiate="6"
  val StrictScale="7"
  val TryToScale="8"
  val StayOnBidside="9"
  val NoCross="A"
  val OkToCross="B"
  val CallFirst="C"
  val PercentOfVolume="D"
  val DoNotIncrease="E"
  val DoNotReduce="F"
  val AllOrNone="G"
  val ReinstateOnSystemFailure="H"
  val InstitutionsOnly="I"
  val ReinstateOnTradingHalt="J"
  val CancelOnTradingHalt="K"
  val LastPeg="L"
  val MidPrice="M"
  val NonNegotiable="N"
  val OpeningPeg="O"
  val MarketPeg="P"
  val CancelOnSystemFailure="Q"
  val PrimaryPeg="R"
  val Suspend="S"
  val FixedPegToLocalBestBidOrOfferAtTimeOfOrder="T"
  val CustomerDisplayInstruction="U"
  val Netting="V"
  val PegToVwap="W"
  val TradeAlong="X"
  val TryToStop="Y"
  val CancelIfNotBest="Z"
  val TrailingStopPeg="a"
  val StrictLimit="b"
  val IgnorePriceValidityChecks="c"
  val PegToLimitPrice="d"
  val WorkToTargetStrategy="e"
  val IntermarketSweep="f"
  val ExternalRoutingAllowed="g"
  val ExternalRoutingNotAllowed="h"
  val ImbalanceOnly="i"
  val SingleExecutionRequestedForBlockTrade="j"
  val BestExecution="k"
  lazy val fixDescriptionByValue = Map("0"->"STAY_ON_OFFERSIDE","1"->"NOT_HELD",
    "2"->"WORK","3"->"GO_ALONG","4"->"OVER_THE_DAY",
    "5"->"HELD","6"->"PARTICIPATE_DONT_INITIATE","7"->"STRICT_SCALE",
    "8"->"TRY_TO_SCALE","9"->"STAY_ON_BIDSIDE","A"->"NO_CROSS",
    "B"->"OK_TO_CROSS","C"->"CALL_FIRST","D"->"PERCENT_OF_VOLUME",
    "E"->"DO_NOT_INCREASE","F"->"DO_NOT_REDUCE","G"->"ALL_OR_NONE",
    "H"->"REINSTATE_ON_SYSTEM_FAILURE","I"->"INSTITUTIONS_ONLY","J"->"REINSTATE_ON_TRADING_HALT",
    "K"->"CANCEL_ON_TRADING_HALT","L"->"LAST_PEG","M"->"MID_PRICE",
    "N"->"NON_NEGOTIABLE","O"->"OPENING_PEG","P"->"MARKET_PEG",
    "Q"->"CANCEL_ON_SYSTEM_FAILURE","R"->"PRIMARY_PEG","S"->"SUSPEND",
    "T"->"FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER","U"->"CUSTOMER_DISPLAY_INSTRUCTION","V"->"NETTING",
    "W"->"PEG_TO_VWAP","X"->"TRADE_ALONG","Y"->"TRY_TO_STOP",
    "Z"->"CANCEL_IF_NOT_BEST","a"->"TRAILING_STOP_PEG","b"->"STRICT_LIMIT",
    "c"->"IGNORE_PRICE_VALIDITY_CHECKS","d"->"PEG_TO_LIMIT_PRICE","e"->"WORK_TO_TARGET_STRATEGY",
    "f"->"INTERMARKET_SWEEP","g"->"EXTERNAL_ROUTING_ALLOWED","h"->"EXTERNAL_ROUTING_NOT_ALLOWED",
    "i"->"IMBALANCE_ONLY","j"->"SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE","k"->"BEST_EXECUTION")
 
  def decode(a: Option[Any]) : Option[ExecInstField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ExecInstField]
  }

  def decode(a: Any) : Option[ExecInstField] = a match {
    case v: String => Some(ExecInstField(v))
    case v: ExecInstField => Some(v)
    case _ => scala.Option.empty[ExecInstField]
  } 
}
