package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class TradeRequestTypeField(override val value: Int) extends SfFieldInt(569, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(569)TradeRequestType=(").append(value).append(")").append(TradeRequestTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object TradeRequestTypeField {
  val TagId = 569 
  val AllTrades=0
  val MatchedTradesMatchingCriteriaProvidedOnRequest=1
  val UnmatchedTradesThatMatchCriteria=2
  val UnreportedTradesThatMatchCriteria=3
  val AdvisoriesThatMatchCriteria=4
  lazy val fixDescriptionByValue = Map(0->"ALL_TRADES",1->"MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST",
    2->"UNMATCHED_TRADES_THAT_MATCH_CRITERIA",3->"UNREPORTED_TRADES_THAT_MATCH_CRITERIA",4->"ADVISORIES_THAT_MATCH_CRITERIA")
 
  def apply(value: String) = try {
    new TradeRequestTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TradeRequestType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TradeRequestTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TradeRequestTypeField]
  }

  def decode(a: Any) : Option[TradeRequestTypeField] = a match {
    case v: String => Some(TradeRequestTypeField(v))
    case v: Int => Some(TradeRequestTypeField(v))
    case v: TradeRequestTypeField => Some(v)
    case _ => scala.Option.empty[TradeRequestTypeField]
  } 
}
