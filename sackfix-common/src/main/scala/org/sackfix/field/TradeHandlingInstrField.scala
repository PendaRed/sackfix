package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class TradeHandlingInstrField(override val value: String) extends SfFieldString(1123, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1123)TradeHandlingInstr=(").append(value).append(")").append(TradeHandlingInstrField.fixDescriptionByValue.getOrElse(value,""))
}

object TradeHandlingInstrField {
  val TagId = 1123 
  val TradeConfirmation="0"
  val TwoPartyReport="1"
  val OnePartyReportForMatching="2"
  val OnePartyReportForPassThrough="3"
  val AutomatedFloorOrderRouting="4"
  lazy val fixDescriptionByValue = Map("0"->"TRADE_CONFIRMATION","1"->"TWO_PARTY_REPORT",
    "2"->"ONE_PARTY_REPORT_FOR_MATCHING","3"->"ONE_PARTY_REPORT_FOR_PASS_THROUGH","4"->"AUTOMATED_FLOOR_ORDER_ROUTING")
 
  def decode(a: Option[Any]) : Option[TradeHandlingInstrField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TradeHandlingInstrField]
  }

  def decode(a: Any) : Option[TradeHandlingInstrField] = a match {
    case v: String => Some(TradeHandlingInstrField(v))
    case v: Char => Some(TradeHandlingInstrField(v.toString))
    case v: TradeHandlingInstrField => Some(v)
    case _ => scala.Option.empty[TradeHandlingInstrField]
  } 
}
