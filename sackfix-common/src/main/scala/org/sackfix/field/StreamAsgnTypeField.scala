package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class StreamAsgnTypeField(override val value: Int) extends SfFieldInt(1617, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1617)StreamAsgnType=(").append(value).append(")").append(StreamAsgnTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object StreamAsgnTypeField {
  val TagId = 1617 
  val Assignment=1
  val Rejected=2
  val TerminateUnassign=3
  lazy val fixDescriptionByValue = Map(1->"ASSIGNMENT",2->"REJECTED",
    3->"TERMINATE_UNASSIGN")
 
  def apply(value: String) = try {
    new StreamAsgnTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new StreamAsgnType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[StreamAsgnTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[StreamAsgnTypeField]
  }

  def decode(a: Any) : Option[StreamAsgnTypeField] = a match {
    case v: String => Some(StreamAsgnTypeField(v))
    case v: Int => Some(StreamAsgnTypeField(v))
    case v: StreamAsgnTypeField => Some(v)
    case _ => scala.Option.empty[StreamAsgnTypeField]
  } 
}
