package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class TriggerTypeField(override val value: String) extends SfFieldString(1100, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1100)TriggerType=(").append(value).append(")").append(TriggerTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object TriggerTypeField {
  val TagId = 1100 
  val PartialExecution="1"
  val SpecifiedTradingSession="2"
  val NextAuction="3"
  val PriceMovement="4"
  lazy val fixDescriptionByValue = Map("1"->"PARTIAL_EXECUTION","2"->"SPECIFIED_TRADING_SESSION",
    "3"->"NEXT_AUCTION","4"->"PRICE_MOVEMENT")
 
  def decode(a: Option[Any]) : Option[TriggerTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TriggerTypeField]
  }

  def decode(a: Any) : Option[TriggerTypeField] = a match {
    case v: String => Some(TriggerTypeField(v))
    case v: Char => Some(TriggerTypeField(v.toString))
    case v: TriggerTypeField => Some(v)
    case _ => scala.Option.empty[TriggerTypeField]
  } 
}
