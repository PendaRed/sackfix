package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class InstrAttribTypeField(override val value: Int) extends SfFieldInt(871, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(871)InstrAttribType=(").append(value).append(")").append(InstrAttribTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object InstrAttribTypeField {
  val TagId = 871 
  val Flat=1
  val ZeroCoupon=2
  val InterestBearing=3
  val NoPeriodicPayments=4
  val VariableRate=5
  val LessFeeForPut=6
  val SteppedCoupon=7
  val CouponPeriod=8
  val WhenAndIfIssued=9
  val OriginalIssueDiscount=10
  val CallablePuttable=11
  val EscrowedToMaturity=12
  val EscrowedToRedemptionDate=13
  val PreRefunded=14
  val InDefault=15
  val Unrated=16
  val Taxable=17
  val Indexed=18
  val SubjectToAlternativeMinimumTax=19
  val OriginalIssueDiscountPrice=20
  val CallableBelowMaturityValue=21
  val CallableWithoutNoticeByMailToHolderUnlessRegistered=22
  val Text=99
  lazy val fixDescriptionByValue = Map(1->"FLAT",2->"ZERO_COUPON",
    3->"INTEREST_BEARING",4->"NO_PERIODIC_PAYMENTS",5->"VARIABLE_RATE",
    6->"LESS_FEE_FOR_PUT",7->"STEPPED_COUPON",8->"COUPON_PERIOD",
    9->"WHEN_AND_IF_ISSUED",10->"ORIGINAL_ISSUE_DISCOUNT",11->"CALLABLE_PUTTABLE",
    12->"ESCROWED_TO_MATURITY",13->"ESCROWED_TO_REDEMPTION_DATE",14->"PRE_REFUNDED",
    15->"IN_DEFAULT",16->"UNRATED",17->"TAXABLE",
    18->"INDEXED",19->"SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX",20->"ORIGINAL_ISSUE_DISCOUNT_PRICE",
    21->"CALLABLE_BELOW_MATURITY_VALUE",22->"CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED",99->"TEXT")
 
  def apply(value: String) = try {
    new InstrAttribTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new InstrAttribType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[InstrAttribTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[InstrAttribTypeField]
  }

  def decode(a: Any) : Option[InstrAttribTypeField] = a match {
    case v: String => Some(InstrAttribTypeField(v))
    case v: Int => Some(InstrAttribTypeField(v))
    case v: InstrAttribTypeField => Some(v)
    case _ => scala.Option.empty[InstrAttribTypeField]
  } 
}
