package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class DiscretionLimitTypeField(override val value: Int) extends SfFieldInt(843, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(843)DiscretionLimitType=(").append(value).append(")").append(DiscretionLimitTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object DiscretionLimitTypeField {
  val TagId = 843 
  val OrBetter=0
  val Strict=1
  val OrWorse=2
  lazy val fixDescriptionByValue = Map(0->"OR_BETTER",1->"STRICT",
    2->"OR_WORSE")
 
  def apply(value: String) = try {
    new DiscretionLimitTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new DiscretionLimitType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[DiscretionLimitTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[DiscretionLimitTypeField]
  }

  def decode(a: Any) : Option[DiscretionLimitTypeField] = a match {
    case v: String => Some(DiscretionLimitTypeField(v))
    case v: Int => Some(DiscretionLimitTypeField(v))
    case v: DiscretionLimitTypeField => Some(v)
    case _ => scala.Option.empty[DiscretionLimitTypeField]
  } 
}
