package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class ExecTypeField(override val value: String) extends SfFieldString(150, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(150)ExecType=(").append(value).append(")").append(ExecTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object ExecTypeField {
  val TagId = 150 
  val New="0"
  val PartialFill="1"
  val Fill="2"
  val DoneForDay="3"
  val Canceled="4"
  val Replace="5"
  val PendingCancel="6"
  val Stopped="7"
  val Rejected="8"
  val Suspended="9"
  val PendingNew="A"
  val Calculated="B"
  val Expired="C"
  val Restated="D"
  val PendingReplace="E"
  val Trade="F"
  val TradeCorrect="G"
  val TradeCancel="H"
  val OrderStatus="I"
  val TradeInAClearingHold="J"
  val TradeHasBeenReleasedToClearing="K"
  val TriggeredOrActivatedBySystem="L"
  lazy val fixDescriptionByValue = Map("0"->"NEW","1"->"PARTIAL_FILL",
    "2"->"FILL","3"->"DONE_FOR_DAY","4"->"CANCELED",
    "5"->"REPLACE","6"->"PENDING_CANCEL","7"->"STOPPED",
    "8"->"REJECTED","9"->"SUSPENDED","A"->"PENDING_NEW",
    "B"->"CALCULATED","C"->"EXPIRED","D"->"RESTATED",
    "E"->"PENDING_REPLACE","F"->"TRADE","G"->"TRADE_CORRECT",
    "H"->"TRADE_CANCEL","I"->"ORDER_STATUS","J"->"TRADE_IN_A_CLEARING_HOLD",
    "K"->"TRADE_HAS_BEEN_RELEASED_TO_CLEARING","L"->"TRIGGERED_OR_ACTIVATED_BY_SYSTEM")
 
  def decode(a: Option[Any]) : Option[ExecTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ExecTypeField]
  }

  def decode(a: Any) : Option[ExecTypeField] = a match {
    case v: String => Some(ExecTypeField(v))
    case v: Char => Some(ExecTypeField(v.toString))
    case v: ExecTypeField => Some(v)
    case _ => scala.Option.empty[ExecTypeField]
  } 
}
