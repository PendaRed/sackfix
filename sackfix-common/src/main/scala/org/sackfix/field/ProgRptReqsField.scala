package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class ProgRptReqsField(override val value: Int) extends SfFieldInt(414, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(414)ProgRptReqs=(").append(value).append(")").append(ProgRptReqsField.fixDescriptionByValue.getOrElse(value,""))
}

object ProgRptReqsField {
  val TagId = 414 
  val BuysideExplicitlyRequestsStatusUsingStatusrequest=1
  val SellsidePeriodicallySendsStatusUsingListstatus=2
  val RealTimeExecutionReports=3
  lazy val fixDescriptionByValue = Map(1->"BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST",2->"SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS",
    3->"REAL_TIME_EXECUTION_REPORTS")
 
  def apply(value: String) = try {
    new ProgRptReqsField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ProgRptReqs("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ProgRptReqsField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ProgRptReqsField]
  }

  def decode(a: Any) : Option[ProgRptReqsField] = a match {
    case v: String => Some(ProgRptReqsField(v))
    case v: Int => Some(ProgRptReqsField(v))
    case v: ProgRptReqsField => Some(v)
    case _ => scala.Option.empty[ProgRptReqsField]
  } 
}
