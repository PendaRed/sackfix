package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class MultiLegReportingTypeField(override val value: String) extends SfFieldString(442, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(442)MultiLegReportingType=(").append(value).append(")").append(MultiLegReportingTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object MultiLegReportingTypeField {
  val TagId = 442 
  val SingleSecurity="1"
  val IndividualLegOfAMultiLegSecurity="2"
  val MultiLegSecurity="3"
  lazy val fixDescriptionByValue = Map("1"->"SINGLE_SECURITY","2"->"INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY",
    "3"->"MULTI_LEG_SECURITY")
 
  def decode(a: Option[Any]) : Option[MultiLegReportingTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MultiLegReportingTypeField]
  }

  def decode(a: Any) : Option[MultiLegReportingTypeField] = a match {
    case v: String => Some(MultiLegReportingTypeField(v))
    case v: Char => Some(MultiLegReportingTypeField(v.toString))
    case v: MultiLegReportingTypeField => Some(v)
    case _ => scala.Option.empty[MultiLegReportingTypeField]
  } 
}
