package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class NewsCategoryField(override val value: Int) extends SfFieldInt(1473, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1473)NewsCategory=(").append(value).append(")").append(NewsCategoryField.fixDescriptionByValue.getOrElse(value,""))
}

object NewsCategoryField {
  val TagId = 1473 
  val CompanyNews=0
  val MarketplaceNews=1
  val FinancialMarketNews=2
  val TechnicalNews=3
  val OtherNews=99
  lazy val fixDescriptionByValue = Map(0->"COMPANY_NEWS",1->"MARKETPLACE_NEWS",
    2->"FINANCIAL_MARKET_NEWS",3->"TECHNICAL_NEWS",99->"OTHER_NEWS")
 
  def apply(value: String) = try {
    new NewsCategoryField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new NewsCategory("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[NewsCategoryField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[NewsCategoryField]
  }

  def decode(a: Any) : Option[NewsCategoryField] = a match {
    case v: String => Some(NewsCategoryField(v))
    case v: Int => Some(NewsCategoryField(v))
    case v: NewsCategoryField => Some(v)
    case _ => scala.Option.empty[NewsCategoryField]
  } 
}
