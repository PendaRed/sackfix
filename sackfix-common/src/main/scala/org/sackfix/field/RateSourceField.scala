package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class RateSourceField(override val value: Int) extends SfFieldInt(1446, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1446)RateSource=(").append(value).append(")").append(RateSourceField.fixDescriptionByValue.getOrElse(value,""))
}

object RateSourceField {
  val TagId = 1446 
  val Bloomberg=0
  val Reuters=1
  val Telerate=2
  val Other=99
  lazy val fixDescriptionByValue = Map(0->"BLOOMBERG",1->"REUTERS",
    2->"TELERATE",99->"OTHER")
 
  def apply(value: String) = try {
    new RateSourceField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new RateSource("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[RateSourceField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[RateSourceField]
  }

  def decode(a: Any) : Option[RateSourceField] = a match {
    case v: String => Some(RateSourceField(v))
    case v: Int => Some(RateSourceField(v))
    case v: RateSourceField => Some(v)
    case _ => scala.Option.empty[RateSourceField]
  } 
}
