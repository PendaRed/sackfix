package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class BookingUnitField(override val value: String) extends SfFieldString(590, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(590)BookingUnit=(").append(value).append(")").append(BookingUnitField.fixDescriptionByValue.getOrElse(value,""))
}

object BookingUnitField {
  val TagId = 590 
  val EachPartialExecutionIsABookableUnit="0"
  val AggregatePartialExecutionsOnThisOrderAndBookOneTradePerOrder="1"
  val AggregateExecutionsForThisSymbolSideAndSettlementDate="2"
  lazy val fixDescriptionByValue = Map("0"->"EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT","1"->"AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER",
    "2"->"AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE")
 
  def decode(a: Option[Any]) : Option[BookingUnitField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[BookingUnitField]
  }

  def decode(a: Any) : Option[BookingUnitField] = a match {
    case v: String => Some(BookingUnitField(v))
    case v: Char => Some(BookingUnitField(v.toString))
    case v: BookingUnitField => Some(v)
    case _ => scala.Option.empty[BookingUnitField]
  } 
}
