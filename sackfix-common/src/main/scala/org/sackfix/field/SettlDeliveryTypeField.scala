package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class SettlDeliveryTypeField(override val value: Int) extends SfFieldInt(172, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(172)SettlDeliveryType=(").append(value).append(")").append(SettlDeliveryTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object SettlDeliveryTypeField {
  val TagId = 172 
  val VersusPayment=0
  val Free=1
  val TriParty=2
  val HoldInCustody=3
  lazy val fixDescriptionByValue = Map(0->"VERSUS_PAYMENT",1->"FREE",
    2->"TRI_PARTY",3->"HOLD_IN_CUSTODY")
 
  def apply(value: String) = try {
    new SettlDeliveryTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new SettlDeliveryType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[SettlDeliveryTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SettlDeliveryTypeField]
  }

  def decode(a: Any) : Option[SettlDeliveryTypeField] = a match {
    case v: String => Some(SettlDeliveryTypeField(v))
    case v: Int => Some(SettlDeliveryTypeField(v))
    case v: SettlDeliveryTypeField => Some(v)
    case _ => scala.Option.empty[SettlDeliveryTypeField]
  } 
}
