package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class TradSesMethodField(override val value: Int) extends SfFieldInt(338, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(338)TradSesMethod=(").append(value).append(")").append(TradSesMethodField.fixDescriptionByValue.getOrElse(value,""))
}

object TradSesMethodField {
  val TagId = 338 
  val Electronic=1
  val OpenOutcry=2
  val TwoParty=3
  lazy val fixDescriptionByValue = Map(1->"ELECTRONIC",2->"OPEN_OUTCRY",
    3->"TWO_PARTY")
 
  def apply(value: String) = try {
    new TradSesMethodField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TradSesMethod("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TradSesMethodField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TradSesMethodField]
  }

  def decode(a: Any) : Option[TradSesMethodField] = a match {
    case v: String => Some(TradSesMethodField(v))
    case v: Int => Some(TradSesMethodField(v))
    case v: TradSesMethodField => Some(v)
    case _ => scala.Option.empty[TradSesMethodField]
  } 
}
