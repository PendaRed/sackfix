package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class UnitOfMeasureField(override val value: String) extends SfFieldString(996, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(996)UnitOfMeasure=(").append(value).append(")").append(UnitOfMeasureField.fixDescriptionByValue.getOrElse(value,""))
}

object UnitOfMeasureField {
  val TagId = 996 
  val MegawattHours="MWh"
  val OneMillionBtu="MMBtu"
  val Barrels="Bbl"
  val Gallons="Gal"
  val MetricTons="t"
  val Tons="tn"
  val MillionBarrels="MMbbl"
  val Pounds="lbs"
  val TroyOunces="oz_tr"
  val UsDollars="USD"
  val BillionCubicFeet="Bcf"
  val Bushels="Bu"
  lazy val fixDescriptionByValue = Map("MWh"->"MEGAWATT_HOURS","MMBtu"->"ONE_MILLION_BTU",
    "Bbl"->"BARRELS","Gal"->"GALLONS","t"->"METRIC_TONS",
    "tn"->"TONS","MMbbl"->"MILLION_BARRELS","lbs"->"POUNDS",
    "oz_tr"->"TROY_OUNCES","USD"->"US_DOLLARS","Bcf"->"BILLION_CUBIC_FEET",
    "Bu"->"BUSHELS")
 
  def decode(a: Option[Any]) : Option[UnitOfMeasureField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[UnitOfMeasureField]
  }

  def decode(a: Any) : Option[UnitOfMeasureField] = a match {
    case v: String => Some(UnitOfMeasureField(v))
    case v: UnitOfMeasureField => Some(v)
    case _ => scala.Option.empty[UnitOfMeasureField]
  } 
}
