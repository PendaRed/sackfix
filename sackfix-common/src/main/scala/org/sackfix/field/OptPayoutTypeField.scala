package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class OptPayoutTypeField(override val value: Int) extends SfFieldInt(1482, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1482)OptPayoutType=(").append(value).append(")").append(OptPayoutTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object OptPayoutTypeField {
  val TagId = 1482 
  val Vanilla=1
  val Capped=2
  val Binary=3
  lazy val fixDescriptionByValue = Map(1->"VANILLA",2->"CAPPED",
    3->"BINARY")
 
  def apply(value: String) = try {
    new OptPayoutTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new OptPayoutType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[OptPayoutTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[OptPayoutTypeField]
  }

  def decode(a: Any) : Option[OptPayoutTypeField] = a match {
    case v: String => Some(OptPayoutTypeField(v))
    case v: Int => Some(OptPayoutTypeField(v))
    case v: OptPayoutTypeField => Some(v)
    case _ => scala.Option.empty[OptPayoutTypeField]
  } 
}
