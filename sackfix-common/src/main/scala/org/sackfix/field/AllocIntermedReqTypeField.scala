package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class AllocIntermedReqTypeField(override val value: Int) extends SfFieldInt(808, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(808)AllocIntermedReqType=(").append(value).append(")").append(AllocIntermedReqTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object AllocIntermedReqTypeField {
  val TagId = 808 
  val PendingAccept=1
  val PendingRelease=2
  val PendingReversal=3
  val Accept=4
  val BlockLevelReject=5
  val AccountLevelReject=6
  lazy val fixDescriptionByValue = Map(1->"PENDING_ACCEPT",2->"PENDING_RELEASE",
    3->"PENDING_REVERSAL",4->"ACCEPT",5->"BLOCK_LEVEL_REJECT",
    6->"ACCOUNT_LEVEL_REJECT")
 
  def apply(value: String) = try {
    new AllocIntermedReqTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new AllocIntermedReqType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[AllocIntermedReqTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[AllocIntermedReqTypeField]
  }

  def decode(a: Any) : Option[AllocIntermedReqTypeField] = a match {
    case v: String => Some(AllocIntermedReqTypeField(v))
    case v: Int => Some(AllocIntermedReqTypeField(v))
    case v: AllocIntermedReqTypeField => Some(v)
    case _ => scala.Option.empty[AllocIntermedReqTypeField]
  } 
}
