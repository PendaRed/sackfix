package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class AllocHandlInstField(override val value: Int) extends SfFieldInt(209, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(209)AllocHandlInst=(").append(value).append(")").append(AllocHandlInstField.fixDescriptionByValue.getOrElse(value,""))
}

object AllocHandlInstField {
  val TagId = 209 
  val Match=1
  val Forward=2
  val ForwardAndMatch=3
  lazy val fixDescriptionByValue = Map(1->"MATCH",2->"FORWARD",
    3->"FORWARD_AND_MATCH")
 
  def apply(value: String) = try {
    new AllocHandlInstField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new AllocHandlInst("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[AllocHandlInstField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[AllocHandlInstField]
  }

  def decode(a: Any) : Option[AllocHandlInstField] = a match {
    case v: String => Some(AllocHandlInstField(v))
    case v: Int => Some(AllocHandlInstField(v))
    case v: AllocHandlInstField => Some(v)
    case _ => scala.Option.empty[AllocHandlInstField]
  } 
}
