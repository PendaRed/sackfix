package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class PosAmtTypeField(override val value: String) extends SfFieldString(707, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(707)PosAmtType=(").append(value).append(")").append(PosAmtTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object PosAmtTypeField {
  val TagId = 707 
  val FinalMarkToMarketAmount="FMTM"
  val IncrementalMarkToMarketAmount="IMTM"
  val TradeVariationAmount="TVAR"
  val StartOfDayMarkToMarketAmount="SMTM"
  val PremiumAmount="PREM"
  val CashResidualAmount="CRES"
  val CashAmount="CASH"
  val ValueAdjustedAmount="VADJ"
  val SettlementValue="SETL"
  lazy val fixDescriptionByValue = Map("FMTM"->"FINAL_MARK_TO_MARKET_AMOUNT","IMTM"->"INCREMENTAL_MARK_TO_MARKET_AMOUNT",
    "TVAR"->"TRADE_VARIATION_AMOUNT","SMTM"->"START_OF_DAY_MARK_TO_MARKET_AMOUNT","PREM"->"PREMIUM_AMOUNT",
    "CRES"->"CASH_RESIDUAL_AMOUNT","CASH"->"CASH_AMOUNT","VADJ"->"VALUE_ADJUSTED_AMOUNT",
    "SETL"->"SETTLEMENT_VALUE")
 
  def decode(a: Option[Any]) : Option[PosAmtTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[PosAmtTypeField]
  }

  def decode(a: Any) : Option[PosAmtTypeField] = a match {
    case v: String => Some(PosAmtTypeField(v))
    case v: PosAmtTypeField => Some(v)
    case _ => scala.Option.empty[PosAmtTypeField]
  } 
}
