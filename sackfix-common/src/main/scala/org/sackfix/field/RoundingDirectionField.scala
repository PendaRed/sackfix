package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class RoundingDirectionField(override val value: String) extends SfFieldString(468, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(468)RoundingDirection=(").append(value).append(")").append(RoundingDirectionField.fixDescriptionByValue.getOrElse(value,""))
}

object RoundingDirectionField {
  val TagId = 468 
  val RoundToNearest="0"
  val RoundDown="1"
  val RoundUp="2"
  lazy val fixDescriptionByValue = Map("0"->"ROUND_TO_NEAREST","1"->"ROUND_DOWN",
    "2"->"ROUND_UP")
 
  def decode(a: Option[Any]) : Option[RoundingDirectionField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[RoundingDirectionField]
  }

  def decode(a: Any) : Option[RoundingDirectionField] = a match {
    case v: String => Some(RoundingDirectionField(v))
    case v: Char => Some(RoundingDirectionField(v.toString))
    case v: RoundingDirectionField => Some(v)
    case _ => scala.Option.empty[RoundingDirectionField]
  } 
}
