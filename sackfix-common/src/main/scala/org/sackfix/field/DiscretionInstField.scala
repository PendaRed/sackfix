package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class DiscretionInstField(override val value: String) extends SfFieldString(388, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(388)DiscretionInst=(").append(value).append(")").append(DiscretionInstField.fixDescriptionByValue.getOrElse(value,""))
}

object DiscretionInstField {
  val TagId = 388 
  val RelatedToDisplayedPrice="0"
  val RelatedToMarketPrice="1"
  val RelatedToPrimaryPrice="2"
  val RelatedToLocalPrimaryPrice="3"
  val RelatedToMidpointPrice="4"
  val RelatedToLastTradePrice="5"
  val RelatedToVwap="6"
  val AveragePriceGuarantee="7"
  lazy val fixDescriptionByValue = Map("0"->"RELATED_TO_DISPLAYED_PRICE","1"->"RELATED_TO_MARKET_PRICE",
    "2"->"RELATED_TO_PRIMARY_PRICE","3"->"RELATED_TO_LOCAL_PRIMARY_PRICE","4"->"RELATED_TO_MIDPOINT_PRICE",
    "5"->"RELATED_TO_LAST_TRADE_PRICE","6"->"RELATED_TO_VWAP","7"->"AVERAGE_PRICE_GUARANTEE")
 
  def decode(a: Option[Any]) : Option[DiscretionInstField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[DiscretionInstField]
  }

  def decode(a: Any) : Option[DiscretionInstField] = a match {
    case v: String => Some(DiscretionInstField(v))
    case v: Char => Some(DiscretionInstField(v.toString))
    case v: DiscretionInstField => Some(v)
    case _ => scala.Option.empty[DiscretionInstField]
  } 
}
