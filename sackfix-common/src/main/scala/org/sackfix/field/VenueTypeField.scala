package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class VenueTypeField(override val value: String) extends SfFieldString(1430, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1430)VenueType=(").append(value).append(")").append(VenueTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object VenueTypeField {
  val TagId = 1430 
  val Electronic="E"
  val Pit="P"
  val ExPit="X"
  lazy val fixDescriptionByValue = Map("E"->"ELECTRONIC","P"->"PIT",
    "X"->"EX_PIT")
 
  def decode(a: Option[Any]) : Option[VenueTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[VenueTypeField]
  }

  def decode(a: Any) : Option[VenueTypeField] = a match {
    case v: String => Some(VenueTypeField(v))
    case v: Char => Some(VenueTypeField(v.toString))
    case v: VenueTypeField => Some(v)
    case _ => scala.Option.empty[VenueTypeField]
  } 
}
