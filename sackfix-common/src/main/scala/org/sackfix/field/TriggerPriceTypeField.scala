package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class TriggerPriceTypeField(override val value: String) extends SfFieldString(1107, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1107)TriggerPriceType=(").append(value).append(")").append(TriggerPriceTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object TriggerPriceTypeField {
  val TagId = 1107 
  val BestOffer="1"
  val LastTrade="2"
  val BestBid="3"
  val BestBidOrLastTrade="4"
  val BestOfferOrLastTrade="5"
  val BestMid="6"
  lazy val fixDescriptionByValue = Map("1"->"BEST_OFFER","2"->"LAST_TRADE",
    "3"->"BEST_BID","4"->"BEST_BID_OR_LAST_TRADE","5"->"BEST_OFFER_OR_LAST_TRADE",
    "6"->"BEST_MID")
 
  def decode(a: Option[Any]) : Option[TriggerPriceTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TriggerPriceTypeField]
  }

  def decode(a: Any) : Option[TriggerPriceTypeField] = a match {
    case v: String => Some(TriggerPriceTypeField(v))
    case v: Char => Some(TriggerPriceTypeField(v.toString))
    case v: TriggerPriceTypeField => Some(v)
    case _ => scala.Option.empty[TriggerPriceTypeField]
  } 
}
