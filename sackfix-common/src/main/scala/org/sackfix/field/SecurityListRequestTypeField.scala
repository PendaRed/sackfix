package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class SecurityListRequestTypeField(override val value: Int) extends SfFieldInt(559, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(559)SecurityListRequestType=(").append(value).append(")").append(SecurityListRequestTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object SecurityListRequestTypeField {
  val TagId = 559 
  val Symbol=0
  val SecuritytypeAndOrCficode=1
  val Product=2
  val Tradingsessionid=3
  val AllSecurities=4
  lazy val fixDescriptionByValue = Map(0->"SYMBOL",1->"SECURITYTYPE_AND_OR_CFICODE",
    2->"PRODUCT",3->"TRADINGSESSIONID",4->"ALL_SECURITIES")
 
  def apply(value: String) = try {
    new SecurityListRequestTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new SecurityListRequestType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[SecurityListRequestTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SecurityListRequestTypeField]
  }

  def decode(a: Any) : Option[SecurityListRequestTypeField] = a match {
    case v: String => Some(SecurityListRequestTypeField(v))
    case v: Int => Some(SecurityListRequestTypeField(v))
    case v: SecurityListRequestTypeField => Some(v)
    case _ => scala.Option.empty[SecurityListRequestTypeField]
  } 
}
