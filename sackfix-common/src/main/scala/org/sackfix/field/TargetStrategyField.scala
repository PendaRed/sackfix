package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class TargetStrategyField(override val value: Int) extends SfFieldInt(847, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(847)TargetStrategy=(").append(value).append(")").append(TargetStrategyField.fixDescriptionByValue.getOrElse(value,""))
}

object TargetStrategyField {
  val TagId = 847 
  val Vwap=1
  val Participate=2
  val MininizeMarketImpact=3
  lazy val fixDescriptionByValue = Map(1->"VWAP",2->"PARTICIPATE",
    3->"MININIZE_MARKET_IMPACT")
 
  def apply(value: String) = try {
    new TargetStrategyField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TargetStrategy("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TargetStrategyField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TargetStrategyField]
  }

  def decode(a: Any) : Option[TargetStrategyField] = a match {
    case v: String => Some(TargetStrategyField(v))
    case v: Int => Some(TargetStrategyField(v))
    case v: TargetStrategyField => Some(v)
    case _ => scala.Option.empty[TargetStrategyField]
  } 
}
