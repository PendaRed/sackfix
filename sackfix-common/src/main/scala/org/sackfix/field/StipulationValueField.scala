package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class StipulationValueField(override val value: String) extends SfFieldString(234, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(234)StipulationValue=(").append(value).append(")").append(StipulationValueField.fixDescriptionByValue.getOrElse(value,""))
}

object StipulationValueField {
  val TagId = 234 
  val SpecialCumDividend="CD"
  val SpecialExDividend="XD"
  val SpecialCumCoupon="CC"
  val SpecialExCoupon="XC"
  val SpecialCumBonus="CB"
  val SpecialExBonus="XB"
  val SpecialCumRights="CR"
  val SpecialExRights="XR"
  val SpecialCumCapitalRepayments="CP"
  val SpecialExCapitalRepayments="XP"
  val CashSettlement="CS"
  val SpecialPrice="SP"
  val ReportForEuropeanEquityMarketSecurities="TR"
  val GuaranteedDelivery="GD"
  lazy val fixDescriptionByValue = Map("CD"->"SPECIAL_CUM_DIVIDEND","XD"->"SPECIAL_EX_DIVIDEND",
    "CC"->"SPECIAL_CUM_COUPON","XC"->"SPECIAL_EX_COUPON","CB"->"SPECIAL_CUM_BONUS",
    "XB"->"SPECIAL_EX_BONUS","CR"->"SPECIAL_CUM_RIGHTS","XR"->"SPECIAL_EX_RIGHTS",
    "CP"->"SPECIAL_CUM_CAPITAL_REPAYMENTS","XP"->"SPECIAL_EX_CAPITAL_REPAYMENTS","CS"->"CASH_SETTLEMENT",
    "SP"->"SPECIAL_PRICE","TR"->"REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES","GD"->"GUARANTEED_DELIVERY")
 
  def decode(a: Option[Any]) : Option[StipulationValueField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[StipulationValueField]
  }

  def decode(a: Any) : Option[StipulationValueField] = a match {
    case v: String => Some(StipulationValueField(v))
    case v: StipulationValueField => Some(v)
    case _ => scala.Option.empty[StipulationValueField]
  } 
}
