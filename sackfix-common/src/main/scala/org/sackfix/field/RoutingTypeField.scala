package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class RoutingTypeField(override val value: Int) extends SfFieldInt(216, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(216)RoutingType=(").append(value).append(")").append(RoutingTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object RoutingTypeField {
  val TagId = 216 
  val TargetFirm=1
  val TargetList=2
  val BlockFirm=3
  val BlockList=4
  lazy val fixDescriptionByValue = Map(1->"TARGET_FIRM",2->"TARGET_LIST",
    3->"BLOCK_FIRM",4->"BLOCK_LIST")
 
  def apply(value: String) = try {
    new RoutingTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new RoutingType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[RoutingTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[RoutingTypeField]
  }

  def decode(a: Any) : Option[RoutingTypeField] = a match {
    case v: String => Some(RoutingTypeField(v))
    case v: Int => Some(RoutingTypeField(v))
    case v: RoutingTypeField => Some(v)
    case _ => scala.Option.empty[RoutingTypeField]
  } 
}
