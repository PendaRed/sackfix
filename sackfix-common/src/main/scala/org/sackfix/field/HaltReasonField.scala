package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class HaltReasonField(override val value: String) extends SfFieldString(327, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(327)HaltReason=(").append(value).append(")").append(HaltReasonField.fixDescriptionByValue.getOrElse(value,""))
}

object HaltReasonField {
  val TagId = 327 
  val NewsDissemination="D"
  val OrderInflux="E"
  val OrderImbalance="I"
  val AdditionalInformation="M"
  val NewsPending="P"
  val EquipmentChangeover="X"
  lazy val fixDescriptionByValue = Map("D"->"NEWS_DISSEMINATION","E"->"ORDER_INFLUX",
    "I"->"ORDER_IMBALANCE","M"->"ADDITIONAL_INFORMATION","P"->"NEWS_PENDING",
    "X"->"EQUIPMENT_CHANGEOVER")
 
  def decode(a: Option[Any]) : Option[HaltReasonField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[HaltReasonField]
  }

  def decode(a: Any) : Option[HaltReasonField] = a match {
    case v: String => Some(HaltReasonField(v))
    case v: Char => Some(HaltReasonField(v.toString))
    case v: HaltReasonField => Some(v)
    case _ => scala.Option.empty[HaltReasonField]
  } 
}
