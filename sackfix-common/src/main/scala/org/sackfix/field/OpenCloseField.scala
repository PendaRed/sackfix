package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class OpenCloseField(override val value: String) extends SfFieldString(77, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(77)OpenClose=(").append(value).append(")").append(OpenCloseField.fixDescriptionByValue.getOrElse(value,""))
}

object OpenCloseField {
  val TagId = 77 
  val Open="O"
  val Close="C"
  lazy val fixDescriptionByValue = Map("O"->"OPEN","C"->"CLOSE")
 
  def decode(a: Option[Any]) : Option[OpenCloseField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[OpenCloseField]
  }

  def decode(a: Any) : Option[OpenCloseField] = a match {
    case v: String => Some(OpenCloseField(v))
    case v: Char => Some(OpenCloseField(v.toString))
    case v: OpenCloseField => Some(v)
    case _ => scala.Option.empty[OpenCloseField]
  } 
}
