package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class RefOrdIDReasonField(override val value: Int) extends SfFieldInt(1431, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1431)RefOrdIDReason=(").append(value).append(")").append(RefOrdIDReasonField.fixDescriptionByValue.getOrElse(value,""))
}

object RefOrdIDReasonField {
  val TagId = 1431 
  val GtcFromPreviousDay=0
  val PartialFillRemaining=1
  val OrderChanged=2
  lazy val fixDescriptionByValue = Map(0->"GTC_FROM_PREVIOUS_DAY",1->"PARTIAL_FILL_REMAINING",
    2->"ORDER_CHANGED")
 
  def apply(value: String) = try {
    new RefOrdIDReasonField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new RefOrdIDReason("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[RefOrdIDReasonField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[RefOrdIDReasonField]
  }

  def decode(a: Any) : Option[RefOrdIDReasonField] = a match {
    case v: String => Some(RefOrdIDReasonField(v))
    case v: Int => Some(RefOrdIDReasonField(v))
    case v: RefOrdIDReasonField => Some(v)
    case _ => scala.Option.empty[RefOrdIDReasonField]
  } 
}
