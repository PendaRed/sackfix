package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class QuoteRequestRejectReasonField(override val value: Int) extends SfFieldInt(658, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(658)QuoteRequestRejectReason=(").append(value).append(")").append(QuoteRequestRejectReasonField.fixDescriptionByValue.getOrElse(value,""))
}

object QuoteRequestRejectReasonField {
  val TagId = 658 
  val UnknownSymbol=1
  val ExchangeClosed=2
  val QuoteRequestExceedsLimit=3
  val TooLateToEnter=4
  val InvalidPrice=5
  val NotAuthorizedToRequestQuote=6
  val NoMatchForInquiry=7
  val NoMarketForInstrument=8
  val NoInventory=9
  val Pass=10
  val InsufficientCredit=11
  val Other=99
  lazy val fixDescriptionByValue = Map(1->"UNKNOWN_SYMBOL",2->"EXCHANGE_CLOSED",
    3->"QUOTE_REQUEST_EXCEEDS_LIMIT",4->"TOO_LATE_TO_ENTER",5->"INVALID_PRICE",
    6->"NOT_AUTHORIZED_TO_REQUEST_QUOTE",7->"NO_MATCH_FOR_INQUIRY",8->"NO_MARKET_FOR_INSTRUMENT",
    9->"NO_INVENTORY",10->"PASS",11->"INSUFFICIENT_CREDIT",
    99->"OTHER")
 
  def apply(value: String) = try {
    new QuoteRequestRejectReasonField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new QuoteRequestRejectReason("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[QuoteRequestRejectReasonField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[QuoteRequestRejectReasonField]
  }

  def decode(a: Any) : Option[QuoteRequestRejectReasonField] = a match {
    case v: String => Some(QuoteRequestRejectReasonField(v))
    case v: Int => Some(QuoteRequestRejectReasonField(v))
    case v: QuoteRequestRejectReasonField => Some(v)
    case _ => scala.Option.empty[QuoteRequestRejectReasonField]
  } 
}
