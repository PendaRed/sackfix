package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class ExpirationQtyTypeField(override val value: Int) extends SfFieldInt(982, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(982)ExpirationQtyType=(").append(value).append(")").append(ExpirationQtyTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object ExpirationQtyTypeField {
  val TagId = 982 
  val AutoExercise=1
  val NonAutoExercise=2
  val FinalWillBeExercised=3
  val ContraryIntention=4
  val Difference=5
  lazy val fixDescriptionByValue = Map(1->"AUTO_EXERCISE",2->"NON_AUTO_EXERCISE",
    3->"FINAL_WILL_BE_EXERCISED",4->"CONTRARY_INTENTION",5->"DIFFERENCE")
 
  def apply(value: String) = try {
    new ExpirationQtyTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ExpirationQtyType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ExpirationQtyTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ExpirationQtyTypeField]
  }

  def decode(a: Any) : Option[ExpirationQtyTypeField] = a match {
    case v: String => Some(ExpirationQtyTypeField(v))
    case v: Int => Some(ExpirationQtyTypeField(v))
    case v: ExpirationQtyTypeField => Some(v)
    case _ => scala.Option.empty[ExpirationQtyTypeField]
  } 
}
