package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class ListRejectReasonField(override val value: Int) extends SfFieldInt(1386, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1386)ListRejectReason=(").append(value).append(")").append(ListRejectReasonField.fixDescriptionByValue.getOrElse(value,""))
}

object ListRejectReasonField {
  val TagId = 1386 
  val BrokerExchangeOption=0
  val ExchangeClosed=2
  val TooLateToEnter=4
  val UnknownOrder=5
  val DuplicateOrder=6
  val UnsupportedOrderCharacteristic=11
  val Other=99
  lazy val fixDescriptionByValue = Map(0->"BROKER_EXCHANGE_OPTION",2->"EXCHANGE_CLOSED",
    4->"TOO_LATE_TO_ENTER",5->"UNKNOWN_ORDER",6->"DUPLICATE_ORDER",
    11->"UNSUPPORTED_ORDER_CHARACTERISTIC",99->"OTHER")
 
  def apply(value: String) = try {
    new ListRejectReasonField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ListRejectReason("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ListRejectReasonField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ListRejectReasonField]
  }

  def decode(a: Any) : Option[ListRejectReasonField] = a match {
    case v: String => Some(ListRejectReasonField(v))
    case v: Int => Some(ListRejectReasonField(v))
    case v: ListRejectReasonField => Some(v)
    case _ => scala.Option.empty[ListRejectReasonField]
  } 
}
