package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class LastCapacityField(override val value: String) extends SfFieldString(29, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(29)LastCapacity=(").append(value).append(")").append(LastCapacityField.fixDescriptionByValue.getOrElse(value,""))
}

object LastCapacityField {
  val TagId = 29 
  val Agent="1"
  val CrossAsAgent="2"
  val CrossAsPrincipal="3"
  val Principal="4"
  lazy val fixDescriptionByValue = Map("1"->"AGENT","2"->"CROSS_AS_AGENT",
    "3"->"CROSS_AS_PRINCIPAL","4"->"PRINCIPAL")
 
  def decode(a: Option[Any]) : Option[LastCapacityField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[LastCapacityField]
  }

  def decode(a: Any) : Option[LastCapacityField] = a match {
    case v: String => Some(LastCapacityField(v))
    case v: Char => Some(LastCapacityField(v.toString))
    case v: LastCapacityField => Some(v)
    case _ => scala.Option.empty[LastCapacityField]
  } 
}
