package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldMonthYear
import java.time.LocalDate
import org.sackfix.common.validated.fields.SfFixDateFormats

/**
  * Generated by SackFix code generator on 20170521
  */
case class LegContractSettlMonthField(override val value: LocalDate) extends SfFieldMonthYear(955, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(955)LegContractSettlMonth=(").append(value).append(")")
}

object LegContractSettlMonthField {
  val TagId = 955  
  def apply(value: String) = try {
    new LegContractSettlMonthField(LocalDate.from(SfFixDateFormats.localMktDate.parse(value)))
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new LegContractSettlMonth("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[LegContractSettlMonthField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[LegContractSettlMonthField]
  }

  def decode(a: Any) : Option[LegContractSettlMonthField] = a match {
    case v: String => Some(LegContractSettlMonthField(v))
    case v: LocalDate => Some(LegContractSettlMonthField(v))
    case v: LegContractSettlMonthField => Some(v)
    case _ => scala.Option.empty[LegContractSettlMonthField]
  } 
}
