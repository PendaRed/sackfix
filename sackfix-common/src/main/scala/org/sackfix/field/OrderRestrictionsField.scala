package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class OrderRestrictionsField(override val value: String) extends SfFieldString(529, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(529)OrderRestrictions=(").append(value).append(")").append(OrderRestrictionsField.fixDescriptionByValue.getOrElse(value,""))
}

object OrderRestrictionsField {
  val TagId = 529 
  val ProgramTrade="1"
  val IndexArbitrage="2"
  val NonIndexArbitrage="3"
  val CompetingMarketMaker="4"
  val ActingAsMarketMakerOrSpecialistInTheSecurity="5"
  val ActingAsMarketMakerOrSpecialistInTheUnderlyingSecurityOfADerivativeSecurity="6"
  val ForeignEntity="7"
  val ExternalMarketParticipant="8"
  val ExternalInterConnectedMarketLinkage="9"
  val RisklessArbitrage="A"
  lazy val fixDescriptionByValue = Map("1"->"PROGRAM_TRADE","2"->"INDEX_ARBITRAGE",
    "3"->"NON_INDEX_ARBITRAGE","4"->"COMPETING_MARKET_MAKER","5"->"ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY",
    "6"->"ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY","7"->"FOREIGN_ENTITY","8"->"EXTERNAL_MARKET_PARTICIPANT",
    "9"->"EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE","A"->"RISKLESS_ARBITRAGE")
 
  def decode(a: Option[Any]) : Option[OrderRestrictionsField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[OrderRestrictionsField]
  }

  def decode(a: Any) : Option[OrderRestrictionsField] = a match {
    case v: String => Some(OrderRestrictionsField(v))
    case v: OrderRestrictionsField => Some(v)
    case _ => scala.Option.empty[OrderRestrictionsField]
  } 
}
