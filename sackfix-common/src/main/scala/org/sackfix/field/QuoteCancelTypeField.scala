package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class QuoteCancelTypeField(override val value: Int) extends SfFieldInt(298, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(298)QuoteCancelType=(").append(value).append(")").append(QuoteCancelTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object QuoteCancelTypeField {
  val TagId = 298 
  val CancelForSymbol=1
  val CancelForSecurityType=2
  val CancelForUnderlyingSymbol=3
  val CancelAllQuotes=4
  val CancelQuoteSpecifiedInQuoteid=5
  lazy val fixDescriptionByValue = Map(1->"CANCEL_FOR_SYMBOL",2->"CANCEL_FOR_SECURITY_TYPE",
    3->"CANCEL_FOR_UNDERLYING_SYMBOL",4->"CANCEL_ALL_QUOTES",5->"CANCEL_QUOTE_SPECIFIED_IN_QUOTEID")
 
  def apply(value: String) = try {
    new QuoteCancelTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new QuoteCancelType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[QuoteCancelTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[QuoteCancelTypeField]
  }

  def decode(a: Any) : Option[QuoteCancelTypeField] = a match {
    case v: String => Some(QuoteCancelTypeField(v))
    case v: Int => Some(QuoteCancelTypeField(v))
    case v: QuoteCancelTypeField => Some(v)
    case _ => scala.Option.empty[QuoteCancelTypeField]
  } 
}
