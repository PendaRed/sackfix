package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class ApplReportTypeField(override val value: Int) extends SfFieldInt(1426, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1426)ApplReportType=(").append(value).append(")").append(ApplReportTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object ApplReportTypeField {
  val TagId = 1426 
  val ResetApplseqnumToNewValueSpecifiedInApplnewseqnum=0
  val ReportsThatTheLastMessageHasBeenSentForTheApplidsReferToRefappllastseqnumForTheApplicationSequenceNumberOfTheLastMessage=1
  val HeartbeatMessageIndicatingThatApplicationIdentifiedByRefapplidForTheApplicationSequenceNumberOfThePreviousMessage=2
  lazy val fixDescriptionByValue = Map(0->"RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM",1->"REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFER_TO_REFAPPLLASTSEQNUM_FOR_THE_APPLICATION_SEQUENCE_NUMBER_OF_THE_LAST_MESSAGE_",
    2->"HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFAPPLID_FOR_THE_APPLICATION_SEQUENCE_NUMBER_OF_THE_PREVIOUS_MESSAGE_")
 
  def apply(value: String) = try {
    new ApplReportTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ApplReportType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ApplReportTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ApplReportTypeField]
  }

  def decode(a: Any) : Option[ApplReportTypeField] = a match {
    case v: String => Some(ApplReportTypeField(v))
    case v: Int => Some(ApplReportTypeField(v))
    case v: ApplReportTypeField => Some(v)
    case _ => scala.Option.empty[ApplReportTypeField]
  } 
}
