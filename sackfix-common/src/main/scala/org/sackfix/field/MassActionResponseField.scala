package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class MassActionResponseField(override val value: Int) extends SfFieldInt(1375, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1375)MassActionResponse=(").append(value).append(")").append(MassActionResponseField.fixDescriptionByValue.getOrElse(value,""))
}

object MassActionResponseField {
  val TagId = 1375 
  val RejectedSeeMassactionrejectreason=0
  val Accepted=1
  lazy val fixDescriptionByValue = Map(0->"REJECTED_SEE_MASSACTIONREJECTREASON",1->"ACCEPTED")
 
  def apply(value: String) = try {
    new MassActionResponseField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new MassActionResponse("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[MassActionResponseField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MassActionResponseField]
  }

  def decode(a: Any) : Option[MassActionResponseField] = a match {
    case v: String => Some(MassActionResponseField(v))
    case v: Int => Some(MassActionResponseField(v))
    case v: MassActionResponseField => Some(v)
    case _ => scala.Option.empty[MassActionResponseField]
  } 
}
