package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class QuoteTypeField(override val value: Int) extends SfFieldInt(537, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(537)QuoteType=(").append(value).append(")").append(QuoteTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object QuoteTypeField {
  val TagId = 537 
  val Indicative=0
  val Tradeable=1
  val RestrictedTradeable=2
  val Counter=3
  lazy val fixDescriptionByValue = Map(0->"INDICATIVE",1->"TRADEABLE",
    2->"RESTRICTED_TRADEABLE",3->"COUNTER")
 
  def apply(value: String) = try {
    new QuoteTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new QuoteType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[QuoteTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[QuoteTypeField]
  }

  def decode(a: Any) : Option[QuoteTypeField] = a match {
    case v: String => Some(QuoteTypeField(v))
    case v: Int => Some(QuoteTypeField(v))
    case v: QuoteTypeField => Some(v)
    case _ => scala.Option.empty[QuoteTypeField]
  } 
}
