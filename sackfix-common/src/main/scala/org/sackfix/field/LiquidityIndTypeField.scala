package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class LiquidityIndTypeField(override val value: Int) extends SfFieldInt(409, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(409)LiquidityIndType=(").append(value).append(")").append(LiquidityIndTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object LiquidityIndTypeField {
  val TagId = 409 
  val FivedayMovingAverage=1
  val TwentydayMovingAverage=2
  val NormalMarketSize=3
  val Other=4
  lazy val fixDescriptionByValue = Map(1->"FIVEDAY_MOVING_AVERAGE",2->"TWENTYDAY_MOVING_AVERAGE",
    3->"NORMAL_MARKET_SIZE",4->"OTHER")
 
  def apply(value: String) = try {
    new LiquidityIndTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new LiquidityIndType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[LiquidityIndTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[LiquidityIndTypeField]
  }

  def decode(a: Any) : Option[LiquidityIndTypeField] = a match {
    case v: String => Some(LiquidityIndTypeField(v))
    case v: Int => Some(LiquidityIndTypeField(v))
    case v: LiquidityIndTypeField => Some(v)
    case _ => scala.Option.empty[LiquidityIndTypeField]
  } 
}
