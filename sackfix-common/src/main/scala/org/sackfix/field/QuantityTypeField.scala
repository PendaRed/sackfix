package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class QuantityTypeField(override val value: Int) extends SfFieldInt(465, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(465)QuantityType=(").append(value).append(")").append(QuantityTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object QuantityTypeField {
  val TagId = 465 
  val Shares=1
  val Bonds=2
  val Currentface=3
  val Originalface=4
  val Currency=5
  val Contracts=6
  val Other=7
  val Par=8
  lazy val fixDescriptionByValue = Map(1->"SHARES",2->"BONDS",
    3->"CURRENTFACE",4->"ORIGINALFACE",5->"CURRENCY",
    6->"CONTRACTS",7->"OTHER",8->"PAR")
 
  def apply(value: String) = try {
    new QuantityTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new QuantityType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[QuantityTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[QuantityTypeField]
  }

  def decode(a: Any) : Option[QuantityTypeField] = a match {
    case v: String => Some(QuantityTypeField(v))
    case v: Int => Some(QuantityTypeField(v))
    case v: QuantityTypeField => Some(v)
    case _ => scala.Option.empty[QuantityTypeField]
  } 
}
