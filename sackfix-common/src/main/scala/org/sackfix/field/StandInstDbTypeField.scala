package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class StandInstDbTypeField(override val value: Int) extends SfFieldInt(169, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(169)StandInstDbType=(").append(value).append(")").append(StandInstDbTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object StandInstDbTypeField {
  val TagId = 169 
  val Other=0
  val DtcSid=1
  val ThomsonAlert=2
  val AGlobalCustodian=3
  val Accountnet=4
  lazy val fixDescriptionByValue = Map(0->"OTHER",1->"DTC_SID",
    2->"THOMSON_ALERT",3->"A_GLOBAL_CUSTODIAN",4->"ACCOUNTNET")
 
  def apply(value: String) = try {
    new StandInstDbTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new StandInstDbType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[StandInstDbTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[StandInstDbTypeField]
  }

  def decode(a: Any) : Option[StandInstDbTypeField] = a match {
    case v: String => Some(StandInstDbTypeField(v))
    case v: Int => Some(StandInstDbTypeField(v))
    case v: StandInstDbTypeField => Some(v)
    case _ => scala.Option.empty[StandInstDbTypeField]
  } 
}
