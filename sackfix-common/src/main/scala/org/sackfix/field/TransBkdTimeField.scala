package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldUtcTimeStamp
import java.time.LocalDateTime
import org.sackfix.common.validated.fields.SfFixDateFormats

/**
  * Generated by SackFix code generator on 20210314
  */
case class TransBkdTimeField(override val value: LocalDateTime) extends SfFieldUtcTimeStamp(483, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(483)TransBkdTime=(").append(value).append(")")
}

object TransBkdTimeField {
  val TagId = 483  
  def apply(value: String) = try {
    new TransBkdTimeField(LocalDateTime.from(SfFixDateFormats.utcTimeStamp.parse(value)))
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TransBkdTime("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TransBkdTimeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TransBkdTimeField]
  }

  def decode(a: Any) : Option[TransBkdTimeField] = a match {
    case v: String => Some(TransBkdTimeField(v))
    case v: LocalDateTime => Some(TransBkdTimeField(v))
    case v: TransBkdTimeField => Some(v)
    case _ => scala.Option.empty[TransBkdTimeField]
  } 
}
