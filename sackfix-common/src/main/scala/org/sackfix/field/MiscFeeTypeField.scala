package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class MiscFeeTypeField(override val value: String) extends SfFieldString(139, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(139)MiscFeeType=(").append(value).append(")").append(MiscFeeTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object MiscFeeTypeField {
  val TagId = 139 
  val Regulatory="1"
  val Tax="2"
  val LocalCommission="3"
  val ExchangeFees="4"
  val Stamp="5"
  val Levy="6"
  val Other="7"
  val Markup="8"
  val ConsumptionTax="9"
  val PerTransaction="10"
  val Conversion="11"
  val Agent="12"
  val TransferFee="13"
  val SecurityLending="14"
  lazy val fixDescriptionByValue = Map("1"->"REGULATORY","2"->"TAX",
    "3"->"LOCAL_COMMISSION","4"->"EXCHANGE_FEES","5"->"STAMP",
    "6"->"LEVY","7"->"OTHER","8"->"MARKUP",
    "9"->"CONSUMPTION_TAX","10"->"PER_TRANSACTION","11"->"CONVERSION",
    "12"->"AGENT","13"->"TRANSFER_FEE","14"->"SECURITY_LENDING")
 
  def decode(a: Option[Any]) : Option[MiscFeeTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MiscFeeTypeField]
  }

  def decode(a: Any) : Option[MiscFeeTypeField] = a match {
    case v: String => Some(MiscFeeTypeField(v))
    case v: MiscFeeTypeField => Some(v)
    case _ => scala.Option.empty[MiscFeeTypeField]
  } 
}
