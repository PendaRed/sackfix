package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class MassActionScopeField(override val value: Int) extends SfFieldInt(1374, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1374)MassActionScope=(").append(value).append(")").append(MassActionScopeField.fixDescriptionByValue.getOrElse(value,""))
}

object MassActionScopeField {
  val TagId = 1374 
  val AllOrdersForASecurity=1
  val AllOrdersForAnUnderlyingSecurity=2
  val AllOrdersForAProduct=3
  val AllOrdersForACficode=4
  val AllOrdersForASecuritytype=5
  val AllOrdersForATradingSession=6
  val AllOrders=7
  val AllOrdersForAMarket=8
  val AllOrdersForAMarketSegment=9
  val AllOrdersForASecurityGroup=10
  lazy val fixDescriptionByValue = Map(1->"ALL_ORDERS_FOR_A_SECURITY",2->"ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY",
    3->"ALL_ORDERS_FOR_A_PRODUCT",4->"ALL_ORDERS_FOR_A_CFICODE",5->"ALL_ORDERS_FOR_A_SECURITYTYPE",
    6->"ALL_ORDERS_FOR_A_TRADING_SESSION",7->"ALL_ORDERS",8->"ALL_ORDERS_FOR_A_MARKET",
    9->"ALL_ORDERS_FOR_A_MARKET_SEGMENT",10->"ALL_ORDERS_FOR_A_SECURITY_GROUP")
 
  def apply(value: String) = try {
    new MassActionScopeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new MassActionScope("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[MassActionScopeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MassActionScopeField]
  }

  def decode(a: Any) : Option[MassActionScopeField] = a match {
    case v: String => Some(MassActionScopeField(v))
    case v: Int => Some(MassActionScopeField(v))
    case v: MassActionScopeField => Some(v)
    case _ => scala.Option.empty[MassActionScopeField]
  } 
}
