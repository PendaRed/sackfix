package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldTzTimeOnly
import java.time.OffsetTime
import org.sackfix.common.validated.fields.SfFixDateFormats

/**
  * Generated by SackFix code generator on 20170404
  */
case class LegMaturityTimeField(override val value: OffsetTime) extends SfFieldTzTimeOnly(1212, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1212)LegMaturityTime=(").append(value).append(")")
}

object LegMaturityTimeField {
  val TagId = 1212  
  def apply(value: String) = try {
    new LegMaturityTimeField(OffsetTime.from(SfFixDateFormats.tzTimeOnly.parse(value)))
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new LegMaturityTime("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[LegMaturityTimeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[LegMaturityTimeField]
  }

  def decode(a: Any) : Option[LegMaturityTimeField] = a match {
    case v: String => Some(LegMaturityTimeField(v))
    case v: OffsetTime => Some(LegMaturityTimeField(v))
    case v: LegMaturityTimeField => Some(v)
    case _ => scala.Option.empty[LegMaturityTimeField]
  } 
}
