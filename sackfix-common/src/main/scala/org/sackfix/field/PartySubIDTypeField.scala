package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class PartySubIDTypeField(override val value: Int) extends SfFieldInt(803, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(803)PartySubIDType=(").append(value).append(")").append(PartySubIDTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object PartySubIDTypeField {
  val TagId = 803 
  val Firm=1
  val Person=2
  val System=3
  val Application=4
  val FullLegalNameOfFirm=5
  val PostalAddress=6
  val PhoneNumber=7
  val EmailAddress=8
  val ContactName=9
  val SecuritiesAccountNumber=10
  val RegistrationNumber=11
  val RegisteredAddress=12
  val RegulatoryStatus=13
  val RegistrationName=14
  val CashAccountNumber=15
  val Bic=16
  val CsdParticipantMemberCode=17
  val RegisteredAddress2=18
  val FundAccountName=19
  val TelexNumber=20
  val FaxNumber=21
  val SecuritiesAccountName=22
  val CashAccountName=23
  val Department=24
  val LocationDesk=25
  val PositionAccountType=26
  val SecurityLocateId=27
  val MarketMaker=28
  val EligibleCounterparty=29
  val ProfessionalClient=30
  val Location=31
  val ExecutionVenue=32
  lazy val fixDescriptionByValue = Map(1->"FIRM",2->"PERSON",
    3->"SYSTEM",4->"APPLICATION",5->"FULL_LEGAL_NAME_OF_FIRM",
    6->"POSTAL_ADDRESS",7->"PHONE_NUMBER",8->"EMAIL_ADDRESS",
    9->"CONTACT_NAME",10->"SECURITIES_ACCOUNT_NUMBER",11->"REGISTRATION_NUMBER",
    12->"REGISTERED_ADDRESS",13->"REGULATORY_STATUS",14->"REGISTRATION_NAME",
    15->"CASH_ACCOUNT_NUMBER",16->"BIC",17->"CSD_PARTICIPANT_MEMBER_CODE",
    18->"REGISTERED_ADDRESS2",19->"FUND_ACCOUNT_NAME",20->"TELEX_NUMBER",
    21->"FAX_NUMBER",22->"SECURITIES_ACCOUNT_NAME",23->"CASH_ACCOUNT_NAME",
    24->"DEPARTMENT",25->"LOCATION_DESK",26->"POSITION_ACCOUNT_TYPE",
    27->"SECURITY_LOCATE_ID",28->"MARKET_MAKER",29->"ELIGIBLE_COUNTERPARTY",
    30->"PROFESSIONAL_CLIENT",31->"LOCATION",32->"EXECUTION_VENUE")
 
  def apply(value: String) = try {
    new PartySubIDTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new PartySubIDType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[PartySubIDTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[PartySubIDTypeField]
  }

  def decode(a: Any) : Option[PartySubIDTypeField] = a match {
    case v: String => Some(PartySubIDTypeField(v))
    case v: Int => Some(PartySubIDTypeField(v))
    case v: PartySubIDTypeField => Some(v)
    case _ => scala.Option.empty[PartySubIDTypeField]
  } 
}
