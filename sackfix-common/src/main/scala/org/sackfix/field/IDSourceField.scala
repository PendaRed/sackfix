package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170404
  */
case class IDSourceField(override val value: String) extends SfFieldString(22, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(22)IDSource=(").append(value).append(")").append(IDSourceField.fixDescriptionByValue.getOrElse(value,""))
}

object IDSourceField {
  val TagId = 22 
  val Cusip="1"
  val Sedol="2"
  val Quik="3"
  val IsinNumber="4"
  val RicCode="5"
  val IsoCurrencyCode="6"
  val IsoCountryCode="7"
  val ExchangeSymbol="8"
  val ConsolidatedTapeAssociation="9"
  lazy val fixDescriptionByValue = Map("1"->"CUSIP","2"->"SEDOL",
    "3"->"QUIK","4"->"ISIN_NUMBER","5"->"RIC_CODE",
    "6"->"ISO_CURRENCY_CODE","7"->"ISO_COUNTRY_CODE","8"->"EXCHANGE_SYMBOL",
    "9"->"CONSOLIDATED_TAPE_ASSOCIATION")
 
  def decode(a: Option[Any]) : Option[IDSourceField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[IDSourceField]
  }

  def decode(a: Any) : Option[IDSourceField] = a match {
    case v: String => Some(IDSourceField(v))
    case v: IDSourceField => Some(v)
    case _ => scala.Option.empty[IDSourceField]
  } 
}
