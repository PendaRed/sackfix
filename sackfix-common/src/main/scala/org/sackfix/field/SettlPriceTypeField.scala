package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class SettlPriceTypeField(override val value: Int) extends SfFieldInt(731, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(731)SettlPriceType=(").append(value).append(")").append(SettlPriceTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object SettlPriceTypeField {
  val TagId = 731 
  val Final=1
  val Theoretical=2
  lazy val fixDescriptionByValue = Map(1->"FINAL",2->"THEORETICAL")
 
  def apply(value: String) = try {
    new SettlPriceTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new SettlPriceType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[SettlPriceTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SettlPriceTypeField]
  }

  def decode(a: Any) : Option[SettlPriceTypeField] = a match {
    case v: String => Some(SettlPriceTypeField(v))
    case v: Int => Some(SettlPriceTypeField(v))
    case v: SettlPriceTypeField => Some(v)
    case _ => scala.Option.empty[SettlPriceTypeField]
  } 
}
