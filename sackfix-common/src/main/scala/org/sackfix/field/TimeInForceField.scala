package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20170521
  */
case class TimeInForceField(override val value: String) extends SfFieldString(59, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(59)TimeInForce=(").append(value).append(")").append(TimeInForceField.fixDescriptionByValue.getOrElse(value,""))
}

object TimeInForceField {
  val TagId = 59 
  val Day="0"
  val GoodTillCancel="1"
  val AtTheOpening="2"
  val ImmediateOrCancel="3"
  val FillOrKill="4"
  val GoodTillCrossing="5"
  val GoodTillDate="6"
  val AtTheClose="7"
  lazy val fixDescriptionByValue = Map("0"->"DAY","1"->"GOOD_TILL_CANCEL",
    "2"->"AT_THE_OPENING","3"->"IMMEDIATE_OR_CANCEL","4"->"FILL_OR_KILL",
    "5"->"GOOD_TILL_CROSSING","6"->"GOOD_TILL_DATE","7"->"AT_THE_CLOSE")
 
  def decode(a: Option[Any]) : Option[TimeInForceField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TimeInForceField]
  }

  def decode(a: Any) : Option[TimeInForceField] = a match {
    case v: String => Some(TimeInForceField(v))
    case v: Char => Some(TimeInForceField(v.toString))
    case v: TimeInForceField => Some(v)
    case _ => scala.Option.empty[TimeInForceField]
  } 
}
