package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class MDQuoteTypeField(override val value: Int) extends SfFieldInt(1070, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1070)MDQuoteType=(").append(value).append(")").append(MDQuoteTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object MDQuoteTypeField {
  val TagId = 1070 
  val Indicative=0
  val Tradeable=1
  val RestrictedTradeable=2
  val Counter=3
  val IndicativeAndTradeable=4
  lazy val fixDescriptionByValue = Map(0->"INDICATIVE",1->"TRADEABLE",
    2->"RESTRICTED_TRADEABLE",3->"COUNTER",4->"INDICATIVE_AND_TRADEABLE")
 
  def apply(value: String) = try {
    new MDQuoteTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new MDQuoteType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[MDQuoteTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MDQuoteTypeField]
  }

  def decode(a: Any) : Option[MDQuoteTypeField] = a match {
    case v: String => Some(MDQuoteTypeField(v))
    case v: Int => Some(MDQuoteTypeField(v))
    case v: MDQuoteTypeField => Some(v)
    case _ => scala.Option.empty[MDQuoteTypeField]
  } 
}
