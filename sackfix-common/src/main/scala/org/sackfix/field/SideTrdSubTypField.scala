package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class SideTrdSubTypField(override val value: Int) extends SfFieldInt(1008, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1008)SideTrdSubTyp=(").append(value).append(")").append(SideTrdSubTypField.fixDescriptionByValue.getOrElse(value,""))
}

object SideTrdSubTypField {
  val TagId = 1008 
  val Cmta=0
  val InternalTransfer=1
  val ExternalTransfer=2
  val RejectForSubmittingTrade=3
  val AdvisoryForContraSide=4
  val OffsetDueToAnAllocation=5
  val OnsetDueToAnAllocation=6
  val DifferentialSpread=7
  val ImpliedSpreadLegExecutedAgainstAnOutright=8
  val TransactionFromExercise=9
  val TransactionFromAssignment=10
  lazy val fixDescriptionByValue = Map(0->"CMTA",1->"INTERNAL_TRANSFER",
    2->"EXTERNAL_TRANSFER",3->"REJECT_FOR_SUBMITTING_TRADE",4->"ADVISORY_FOR_CONTRA_SIDE",
    5->"OFFSET_DUE_TO_AN_ALLOCATION",6->"ONSET_DUE_TO_AN_ALLOCATION",7->"DIFFERENTIAL_SPREAD",
    8->"IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT",9->"TRANSACTION_FROM_EXERCISE",10->"TRANSACTION_FROM_ASSIGNMENT")
 
  def apply(value: String) = try {
    new SideTrdSubTypField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new SideTrdSubTyp("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[SideTrdSubTypField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[SideTrdSubTypField]
  }

  def decode(a: Any) : Option[SideTrdSubTypField] = a match {
    case v: String => Some(SideTrdSubTypField(v))
    case v: Int => Some(SideTrdSubTypField(v))
    case v: SideTrdSubTypField => Some(v)
    case _ => scala.Option.empty[SideTrdSubTypField]
  } 
}
