package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class TradSesModeField(override val value: Int) extends SfFieldInt(339, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(339)TradSesMode=(").append(value).append(")").append(TradSesModeField.fixDescriptionByValue.getOrElse(value,""))
}

object TradSesModeField {
  val TagId = 339 
  val Testing=1
  val Simulated=2
  val Production=3
  lazy val fixDescriptionByValue = Map(1->"TESTING",2->"SIMULATED",
    3->"PRODUCTION")
 
  def apply(value: String) = try {
    new TradSesModeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new TradSesMode("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[TradSesModeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[TradSesModeField]
  }

  def decode(a: Any) : Option[TradSesModeField] = a match {
    case v: String => Some(TradSesModeField(v))
    case v: Int => Some(TradSesModeField(v))
    case v: TradSesModeField => Some(v)
    case _ => scala.Option.empty[TradSesModeField]
  } 
}
