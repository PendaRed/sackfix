package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170521
  */
case class ApplResponseTypeField(override val value: Int) extends SfFieldInt(1348, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(1348)ApplResponseType=(").append(value).append(")").append(ApplResponseTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object ApplResponseTypeField {
  val TagId = 1348 
  val RequestSuccessfullyProcessed=0
  val ApplicationDoesNotExist=1
  val MessagesNotAvailable=2
  lazy val fixDescriptionByValue = Map(0->"REQUEST_SUCCESSFULLY_PROCESSED",1->"APPLICATION_DOES_NOT_EXIST",
    2->"MESSAGES_NOT_AVAILABLE")
 
  def apply(value: String) = try {
    new ApplResponseTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new ApplResponseType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[ApplResponseTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[ApplResponseTypeField]
  }

  def decode(a: Any) : Option[ApplResponseTypeField] = a match {
    case v: String => Some(ApplResponseTypeField(v))
    case v: Int => Some(ApplResponseTypeField(v))
    case v: ApplResponseTypeField => Some(v)
    case _ => scala.Option.empty[ApplResponseTypeField]
  } 
}
