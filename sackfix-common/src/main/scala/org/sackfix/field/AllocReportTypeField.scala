package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class AllocReportTypeField(override val value: Int) extends SfFieldInt(794, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(794)AllocReportType=(").append(value).append(")").append(AllocReportTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object AllocReportTypeField {
  val TagId = 794 
  val SellsideCalculatedUsingPreliminary=3
  val SellsideCalculatedWithoutPreliminary=4
  val WarehouseRecap=5
  val RequestToIntermediary=8
  val PreliminaryRequestToIntermediary=2
  val Accept=9
  val Reject=10
  val AcceptPending=11
  val Complete=12
  val ReversePending=14
  lazy val fixDescriptionByValue = Map(3->"SELLSIDE_CALCULATED_USING_PRELIMINARY",4->"SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY",
    5->"WAREHOUSE_RECAP",8->"REQUEST_TO_INTERMEDIARY",2->"PRELIMINARY_REQUEST_TO_INTERMEDIARY",
    9->"ACCEPT",10->"REJECT",11->"ACCEPT_PENDING",
    12->"COMPLETE",14->"REVERSE_PENDING")
 
  def apply(value: String) = try {
    new AllocReportTypeField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new AllocReportType("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[AllocReportTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[AllocReportTypeField]
  }

  def decode(a: Any) : Option[AllocReportTypeField] = a match {
    case v: String => Some(AllocReportTypeField(v))
    case v: Int => Some(AllocReportTypeField(v))
    case v: AllocReportTypeField => Some(v)
    case _ => scala.Option.empty[AllocReportTypeField]
  } 
}
