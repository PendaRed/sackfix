package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20210314
  */
case class MDElementNameField(override val value: Int) extends SfFieldInt(5450, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(5450)MDElementName=(").append(value).append(")").append(MDElementNameField.fixDescriptionByValue.getOrElse(value,""))
}

object MDElementNameField {
  val TagId = 5450 
  val BestBid=1
  val BestOffer=2
  val Paid=11
  val Given=12
  val DealableBid=45
  val DealableOffer=46
  val LocalBid=47
  val LocalOffer=48
  val DealableRegularBid=49
  val DealableRegularOffer=50
  val DealableOutsideBid=51
  val DealableOutsideOffer=52
  val DealablePlusBid=53
  val DealablePlusOffer=54
  lazy val fixDescriptionByValue = Map(1->"BEST_BID",2->"BEST_OFFER",
    11->"PAID",12->"GIVEN",45->"DEALABLE_BID",
    46->"DEALABLE_OFFER",47->"LOCAL_BID",48->"LOCAL_OFFER",
    49->"DEALABLE_REGULAR_BID",50->"DEALABLE_REGULAR_OFFER",51->"DEALABLE_OUTSIDE_BID",
    52->"DEALABLE_OUTSIDE_OFFER",53->"DEALABLE_PLUS_BID",54->"DEALABLE_PLUS_OFFER")
 
  def apply(value: String) = try {
    new MDElementNameField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new MDElementName("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[MDElementNameField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[MDElementNameField]
  }

  def decode(a: Any) : Option[MDElementNameField] = a match {
    case v: String => Some(MDElementNameField(v))
    case v: Int => Some(MDElementNameField(v))
    case v: MDElementNameField => Some(v)
    case _ => scala.Option.empty[MDElementNameField]
  } 
}
