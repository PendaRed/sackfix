package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldString

/**
  * Generated by SackFix code generator on 20210314
  */
case class StipulationTypeField(override val value: String) extends SfFieldString(233, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(233)StipulationType=(").append(value).append(")").append(StipulationTypeField.fixDescriptionByValue.getOrElse(value,""))
}

object StipulationTypeField {
  val TagId = 233 
  val AbsolutePrepaymentSpeed="ABS"
  val Amt="AMT"
  val AutoReinvestmentAtOrBetter="AUTOREINV"
  val BankQualified="BANKQUAL"
  val BargainConditions="BGNCON"
  val CouponRange="COUPON"
  val ConstantPrepaymentPenalty="CPP"
  val ConstantPrepaymentRate="CPR"
  val ConstantPrepaymentYield="CPY"
  val IsoCurrencyCode="CURRENCY"
  val CustomStartEndDate="CUSTOMDATE"
  val GeographicsAndPercentRange="GEOG"
  val ValuationDiscount="HAIRCUT"
  val FinalCprOfHomeEquityPrepaymentCurve="HEP"
  val Insured="INSURED"
  val YearOrYearMonthOfIssue="ISSUE"
  val IssuersTicker="ISSUER"
  val IssueSizeRange="ISSUESIZE"
  val LookbackDays="LOOKBACK"
  val ExplicitLotIdentifier="LOT"
  val LotVariance="LOTVAR"
  val MaturityYearAndMonth="MAT"
  val MaturityRange="MATURITY"
  val MaximumSubstitutions="MAXSUBS"
  val PercentOfManufacturedHousingPrepaymentCurve="MHP"
  val MinimumDenomination="MINDNOM"
  val MinimumIncrement="MININCR"
  val MinimumQuantity="MINQTY"
  val MonthlyPrepaymentRate="MPR"
  val PaymentFrequencyCalendar="PAYFREQ"
  val NumberOfPieces="PIECES"
  val PoolsMaximum="PMAX"
  val PercentOfProspectusPrepaymentCurve="PPC"
  val PoolsPerLot="PPL"
  val PoolsPerMillion="PPM"
  val PoolsPerTrade="PPT"
  val PriceRange="PRICE"
  val PricingFrequency="PRICEFREQ"
  val ProductionYear="PROD"
  val CallProtection="PROTECT"
  val PercentOfBmaPrepaymentCurve="PSA"
  val Purpose="PURPOSE"
  val BenchmarkPriceSource="PXSOURCE"
  val RatingSourceAndRange="RATING"
  val TypeOfRedemption="REDEMPTION"
  val Restricted="RESTRICTED"
  val MarketSector="SECTOR"
  val SecuritytypeIncludedOrExcluded="SECTYPE"
  val SingleMonthlyMortality="SMM"
  val Structure="STRUCT"
  val SubstitutionsFrequency="SUBSFREQ"
  val SubstitutionsLeft="SUBSLEFT"
  val FreeformText="TEXT"
  val TradeVariance="TRDVAR"
  val WeightedAverageCoupon="WAC"
  val WeightedAverageLifeCoupon="WAL"
  val WeightedAverageLoanAge="WALA"
  val WeightedAverageMaturity="WAM"
  val WholePool="WHOLE"
  val YieldRange="YIELD"
  lazy val fixDescriptionByValue = Map("ABS"->"ABSOLUTE_PREPAYMENT_SPEED","AMT"->"AMT",
    "AUTOREINV"->"AUTO_REINVESTMENT_AT_OR_BETTER","BANKQUAL"->"BANK_QUALIFIED","BGNCON"->"BARGAIN_CONDITIONS",
    "COUPON"->"COUPON_RANGE","CPP"->"CONSTANT_PREPAYMENT_PENALTY","CPR"->"CONSTANT_PREPAYMENT_RATE",
    "CPY"->"CONSTANT_PREPAYMENT_YIELD","CURRENCY"->"ISO_CURRENCY_CODE","CUSTOMDATE"->"CUSTOM_START_END_DATE",
    "GEOG"->"GEOGRAPHICS_AND_PERCENT_RANGE","HAIRCUT"->"VALUATION_DISCOUNT","HEP"->"FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE",
    "INSURED"->"INSURED","ISSUE"->"YEAR_OR_YEAR_MONTH_OF_ISSUE","ISSUER"->"ISSUERS_TICKER",
    "ISSUESIZE"->"ISSUE_SIZE_RANGE","LOOKBACK"->"LOOKBACK_DAYS","LOT"->"EXPLICIT_LOT_IDENTIFIER",
    "LOTVAR"->"LOT_VARIANCE","MAT"->"MATURITY_YEAR_AND_MONTH","MATURITY"->"MATURITY_RANGE",
    "MAXSUBS"->"MAXIMUM_SUBSTITUTIONS","MHP"->"PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE","MINDNOM"->"MINIMUM_DENOMINATION",
    "MININCR"->"MINIMUM_INCREMENT","MINQTY"->"MINIMUM_QUANTITY","MPR"->"MONTHLY_PREPAYMENT_RATE",
    "PAYFREQ"->"PAYMENT_FREQUENCY_CALENDAR","PIECES"->"NUMBER_OF_PIECES","PMAX"->"POOLS_MAXIMUM",
    "PPC"->"PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE","PPL"->"POOLS_PER_LOT","PPM"->"POOLS_PER_MILLION",
    "PPT"->"POOLS_PER_TRADE","PRICE"->"PRICE_RANGE","PRICEFREQ"->"PRICING_FREQUENCY",
    "PROD"->"PRODUCTION_YEAR","PROTECT"->"CALL_PROTECTION","PSA"->"PERCENT_OF_BMA_PREPAYMENT_CURVE",
    "PURPOSE"->"PURPOSE","PXSOURCE"->"BENCHMARK_PRICE_SOURCE","RATING"->"RATING_SOURCE_AND_RANGE",
    "REDEMPTION"->"TYPE_OF_REDEMPTION","RESTRICTED"->"RESTRICTED","SECTOR"->"MARKET_SECTOR",
    "SECTYPE"->"SECURITYTYPE_INCLUDED_OR_EXCLUDED","SMM"->"SINGLE_MONTHLY_MORTALITY","STRUCT"->"STRUCTURE",
    "SUBSFREQ"->"SUBSTITUTIONS_FREQUENCY","SUBSLEFT"->"SUBSTITUTIONS_LEFT","TEXT"->"FREEFORM_TEXT",
    "TRDVAR"->"TRADE_VARIANCE","WAC"->"WEIGHTED_AVERAGE_COUPON","WAL"->"WEIGHTED_AVERAGE_LIFE_COUPON",
    "WALA"->"WEIGHTED_AVERAGE_LOAN_AGE","WAM"->"WEIGHTED_AVERAGE_MATURITY","WHOLE"->"WHOLE_POOL",
    "YIELD"->"YIELD_RANGE")
 
  def decode(a: Option[Any]) : Option[StipulationTypeField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[StipulationTypeField]
  }

  def decode(a: Any) : Option[StipulationTypeField] = a match {
    case v: String => Some(StipulationTypeField(v))
    case v: StipulationTypeField => Some(v)
    case _ => scala.Option.empty[StipulationTypeField]
  } 
}
