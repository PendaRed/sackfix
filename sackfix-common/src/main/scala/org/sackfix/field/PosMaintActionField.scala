package org.sackfix.field

import org.sackfix.common.validated.fields.SfFieldInt

/**
  * Generated by SackFix code generator on 20170404
  */
case class PosMaintActionField(override val value: Int) extends SfFieldInt(712, value) {
  override def toString = appendStringBuilder().toString
  override def appendStringBuilder(b:StringBuilder = new StringBuilder()) = b.append("(712)PosMaintAction=(").append(value).append(")").append(PosMaintActionField.fixDescriptionByValue.getOrElse(value,""))
}

object PosMaintActionField {
  val TagId = 712 
  val New=1
  val Replace=2
  val Cancel=3
  val Reverse=4
  lazy val fixDescriptionByValue = Map(1->"NEW",2->"REPLACE",
    3->"CANCEL",4->"REVERSE")
 
  def apply(value: String) = try {
    new PosMaintActionField(value.toInt)
  } catch {
    case ex: Exception => throw new IllegalArgumentException("new PosMaintAction("+value.toString+") failed with exception", ex)
  } 
  def decode(a: Option[Any]) : Option[PosMaintActionField] = a match {
    case Some(v) => decode(v)
    case _ =>  scala.Option.empty[PosMaintActionField]
  }

  def decode(a: Any) : Option[PosMaintActionField] = a match {
    case v: String => Some(PosMaintActionField(v))
    case v: Int => Some(PosMaintActionField(v))
    case v: PosMaintActionField => Some(v)
    case _ => scala.Option.empty[PosMaintActionField]
  } 
}
